
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model bill
 * 
 */
export type bill = $Result.DefaultSelection<Prisma.$billPayload>
/**
 * Model billitem
 * 
 */
export type billitem = $Result.DefaultSelection<Prisma.$billitemPayload>
/**
 * Model client
 * 
 */
export type client = $Result.DefaultSelection<Prisma.$clientPayload>
/**
 * Model merchant
 * 
 */
export type merchant = $Result.DefaultSelection<Prisma.$merchantPayload>
/**
 * Model ornament
 * 
 */
export type ornament = $Result.DefaultSelection<Prisma.$ornamentPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Bills
 * const bills = await prisma.bill.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Bills
   * const bills = await prisma.bill.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.bill`: Exposes CRUD operations for the **bill** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bills
    * const bills = await prisma.bill.findMany()
    * ```
    */
  get bill(): Prisma.billDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.billitem`: Exposes CRUD operations for the **billitem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Billitems
    * const billitems = await prisma.billitem.findMany()
    * ```
    */
  get billitem(): Prisma.billitemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.client`: Exposes CRUD operations for the **client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.client.findMany()
    * ```
    */
  get client(): Prisma.clientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.merchant`: Exposes CRUD operations for the **merchant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Merchants
    * const merchants = await prisma.merchant.findMany()
    * ```
    */
  get merchant(): Prisma.merchantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ornament`: Exposes CRUD operations for the **ornament** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ornaments
    * const ornaments = await prisma.ornament.findMany()
    * ```
    */
  get ornament(): Prisma.ornamentDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    bill: 'bill',
    billitem: 'billitem',
    client: 'client',
    merchant: 'merchant',
    ornament: 'ornament'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "bill" | "billitem" | "client" | "merchant" | "ornament"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      bill: {
        payload: Prisma.$billPayload<ExtArgs>
        fields: Prisma.billFieldRefs
        operations: {
          findUnique: {
            args: Prisma.billFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$billPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.billFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$billPayload>
          }
          findFirst: {
            args: Prisma.billFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$billPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.billFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$billPayload>
          }
          findMany: {
            args: Prisma.billFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$billPayload>[]
          }
          create: {
            args: Prisma.billCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$billPayload>
          }
          createMany: {
            args: Prisma.billCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.billDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$billPayload>
          }
          update: {
            args: Prisma.billUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$billPayload>
          }
          deleteMany: {
            args: Prisma.billDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.billUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.billUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$billPayload>
          }
          aggregate: {
            args: Prisma.BillAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBill>
          }
          groupBy: {
            args: Prisma.billGroupByArgs<ExtArgs>
            result: $Utils.Optional<BillGroupByOutputType>[]
          }
          count: {
            args: Prisma.billCountArgs<ExtArgs>
            result: $Utils.Optional<BillCountAggregateOutputType> | number
          }
        }
      }
      billitem: {
        payload: Prisma.$billitemPayload<ExtArgs>
        fields: Prisma.billitemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.billitemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$billitemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.billitemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$billitemPayload>
          }
          findFirst: {
            args: Prisma.billitemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$billitemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.billitemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$billitemPayload>
          }
          findMany: {
            args: Prisma.billitemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$billitemPayload>[]
          }
          create: {
            args: Prisma.billitemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$billitemPayload>
          }
          createMany: {
            args: Prisma.billitemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.billitemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$billitemPayload>
          }
          update: {
            args: Prisma.billitemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$billitemPayload>
          }
          deleteMany: {
            args: Prisma.billitemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.billitemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.billitemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$billitemPayload>
          }
          aggregate: {
            args: Prisma.BillitemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBillitem>
          }
          groupBy: {
            args: Prisma.billitemGroupByArgs<ExtArgs>
            result: $Utils.Optional<BillitemGroupByOutputType>[]
          }
          count: {
            args: Prisma.billitemCountArgs<ExtArgs>
            result: $Utils.Optional<BillitemCountAggregateOutputType> | number
          }
        }
      }
      client: {
        payload: Prisma.$clientPayload<ExtArgs>
        fields: Prisma.clientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.clientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.clientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientPayload>
          }
          findFirst: {
            args: Prisma.clientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.clientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientPayload>
          }
          findMany: {
            args: Prisma.clientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientPayload>[]
          }
          create: {
            args: Prisma.clientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientPayload>
          }
          createMany: {
            args: Prisma.clientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.clientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientPayload>
          }
          update: {
            args: Prisma.clientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientPayload>
          }
          deleteMany: {
            args: Prisma.clientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.clientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.clientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientPayload>
          }
          aggregate: {
            args: Prisma.ClientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClient>
          }
          groupBy: {
            args: Prisma.clientGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientGroupByOutputType>[]
          }
          count: {
            args: Prisma.clientCountArgs<ExtArgs>
            result: $Utils.Optional<ClientCountAggregateOutputType> | number
          }
        }
      }
      merchant: {
        payload: Prisma.$merchantPayload<ExtArgs>
        fields: Prisma.merchantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.merchantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$merchantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.merchantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$merchantPayload>
          }
          findFirst: {
            args: Prisma.merchantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$merchantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.merchantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$merchantPayload>
          }
          findMany: {
            args: Prisma.merchantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$merchantPayload>[]
          }
          create: {
            args: Prisma.merchantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$merchantPayload>
          }
          createMany: {
            args: Prisma.merchantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.merchantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$merchantPayload>
          }
          update: {
            args: Prisma.merchantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$merchantPayload>
          }
          deleteMany: {
            args: Prisma.merchantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.merchantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.merchantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$merchantPayload>
          }
          aggregate: {
            args: Prisma.MerchantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMerchant>
          }
          groupBy: {
            args: Prisma.merchantGroupByArgs<ExtArgs>
            result: $Utils.Optional<MerchantGroupByOutputType>[]
          }
          count: {
            args: Prisma.merchantCountArgs<ExtArgs>
            result: $Utils.Optional<MerchantCountAggregateOutputType> | number
          }
        }
      }
      ornament: {
        payload: Prisma.$ornamentPayload<ExtArgs>
        fields: Prisma.ornamentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ornamentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ornamentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ornamentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ornamentPayload>
          }
          findFirst: {
            args: Prisma.ornamentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ornamentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ornamentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ornamentPayload>
          }
          findMany: {
            args: Prisma.ornamentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ornamentPayload>[]
          }
          create: {
            args: Prisma.ornamentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ornamentPayload>
          }
          createMany: {
            args: Prisma.ornamentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ornamentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ornamentPayload>
          }
          update: {
            args: Prisma.ornamentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ornamentPayload>
          }
          deleteMany: {
            args: Prisma.ornamentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ornamentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ornamentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ornamentPayload>
          }
          aggregate: {
            args: Prisma.OrnamentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrnament>
          }
          groupBy: {
            args: Prisma.ornamentGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrnamentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ornamentCountArgs<ExtArgs>
            result: $Utils.Optional<OrnamentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    bill?: billOmit
    billitem?: billitemOmit
    client?: clientOmit
    merchant?: merchantOmit
    ornament?: ornamentOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BillCountOutputType
   */

  export type BillCountOutputType = {
    billitem: number
  }

  export type BillCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    billitem?: boolean | BillCountOutputTypeCountBillitemArgs
  }

  // Custom InputTypes
  /**
   * BillCountOutputType without action
   */
  export type BillCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillCountOutputType
     */
    select?: BillCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BillCountOutputType without action
   */
  export type BillCountOutputTypeCountBillitemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: billitemWhereInput
  }


  /**
   * Count Type ClientCountOutputType
   */

  export type ClientCountOutputType = {
    bill: number
  }

  export type ClientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bill?: boolean | ClientCountOutputTypeCountBillArgs
  }

  // Custom InputTypes
  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientCountOutputType
     */
    select?: ClientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountBillArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: billWhereInput
  }


  /**
   * Count Type MerchantCountOutputType
   */

  export type MerchantCountOutputType = {
    ornament: number
  }

  export type MerchantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ornament?: boolean | MerchantCountOutputTypeCountOrnamentArgs
  }

  // Custom InputTypes
  /**
   * MerchantCountOutputType without action
   */
  export type MerchantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerchantCountOutputType
     */
    select?: MerchantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MerchantCountOutputType without action
   */
  export type MerchantCountOutputTypeCountOrnamentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ornamentWhereInput
  }


  /**
   * Count Type OrnamentCountOutputType
   */

  export type OrnamentCountOutputType = {
    billitem: number
  }

  export type OrnamentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    billitem?: boolean | OrnamentCountOutputTypeCountBillitemArgs
  }

  // Custom InputTypes
  /**
   * OrnamentCountOutputType without action
   */
  export type OrnamentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrnamentCountOutputType
     */
    select?: OrnamentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrnamentCountOutputType without action
   */
  export type OrnamentCountOutputTypeCountBillitemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: billitemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model bill
   */

  export type AggregateBill = {
    _count: BillCountAggregateOutputType | null
    _avg: BillAvgAggregateOutputType | null
    _sum: BillSumAggregateOutputType | null
    _min: BillMinAggregateOutputType | null
    _max: BillMaxAggregateOutputType | null
  }

  export type BillAvgAggregateOutputType = {
    id: number | null
    clientId: number | null
    totalAmount: number | null
  }

  export type BillSumAggregateOutputType = {
    id: number | null
    clientId: number | null
    totalAmount: number | null
  }

  export type BillMinAggregateOutputType = {
    id: number | null
    clientId: number | null
    totalAmount: number | null
    createdAt: Date | null
  }

  export type BillMaxAggregateOutputType = {
    id: number | null
    clientId: number | null
    totalAmount: number | null
    createdAt: Date | null
  }

  export type BillCountAggregateOutputType = {
    id: number
    clientId: number
    totalAmount: number
    createdAt: number
    _all: number
  }


  export type BillAvgAggregateInputType = {
    id?: true
    clientId?: true
    totalAmount?: true
  }

  export type BillSumAggregateInputType = {
    id?: true
    clientId?: true
    totalAmount?: true
  }

  export type BillMinAggregateInputType = {
    id?: true
    clientId?: true
    totalAmount?: true
    createdAt?: true
  }

  export type BillMaxAggregateInputType = {
    id?: true
    clientId?: true
    totalAmount?: true
    createdAt?: true
  }

  export type BillCountAggregateInputType = {
    id?: true
    clientId?: true
    totalAmount?: true
    createdAt?: true
    _all?: true
  }

  export type BillAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which bill to aggregate.
     */
    where?: billWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bills to fetch.
     */
    orderBy?: billOrderByWithRelationInput | billOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: billWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned bills
    **/
    _count?: true | BillCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BillAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BillSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BillMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BillMaxAggregateInputType
  }

  export type GetBillAggregateType<T extends BillAggregateArgs> = {
        [P in keyof T & keyof AggregateBill]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBill[P]>
      : GetScalarType<T[P], AggregateBill[P]>
  }




  export type billGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: billWhereInput
    orderBy?: billOrderByWithAggregationInput | billOrderByWithAggregationInput[]
    by: BillScalarFieldEnum[] | BillScalarFieldEnum
    having?: billScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BillCountAggregateInputType | true
    _avg?: BillAvgAggregateInputType
    _sum?: BillSumAggregateInputType
    _min?: BillMinAggregateInputType
    _max?: BillMaxAggregateInputType
  }

  export type BillGroupByOutputType = {
    id: number
    clientId: number
    totalAmount: number
    createdAt: Date
    _count: BillCountAggregateOutputType | null
    _avg: BillAvgAggregateOutputType | null
    _sum: BillSumAggregateOutputType | null
    _min: BillMinAggregateOutputType | null
    _max: BillMaxAggregateOutputType | null
  }

  type GetBillGroupByPayload<T extends billGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BillGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BillGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BillGroupByOutputType[P]>
            : GetScalarType<T[P], BillGroupByOutputType[P]>
        }
      >
    >


  export type billSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    totalAmount?: boolean
    createdAt?: boolean
    client?: boolean | clientDefaultArgs<ExtArgs>
    billitem?: boolean | bill$billitemArgs<ExtArgs>
    _count?: boolean | BillCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bill"]>



  export type billSelectScalar = {
    id?: boolean
    clientId?: boolean
    totalAmount?: boolean
    createdAt?: boolean
  }

  export type billOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clientId" | "totalAmount" | "createdAt", ExtArgs["result"]["bill"]>
  export type billInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | clientDefaultArgs<ExtArgs>
    billitem?: boolean | bill$billitemArgs<ExtArgs>
    _count?: boolean | BillCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $billPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "bill"
    objects: {
      client: Prisma.$clientPayload<ExtArgs>
      billitem: Prisma.$billitemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clientId: number
      totalAmount: number
      createdAt: Date
    }, ExtArgs["result"]["bill"]>
    composites: {}
  }

  type billGetPayload<S extends boolean | null | undefined | billDefaultArgs> = $Result.GetResult<Prisma.$billPayload, S>

  type billCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<billFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BillCountAggregateInputType | true
    }

  export interface billDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['bill'], meta: { name: 'bill' } }
    /**
     * Find zero or one Bill that matches the filter.
     * @param {billFindUniqueArgs} args - Arguments to find a Bill
     * @example
     * // Get one Bill
     * const bill = await prisma.bill.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends billFindUniqueArgs>(args: SelectSubset<T, billFindUniqueArgs<ExtArgs>>): Prisma__billClient<$Result.GetResult<Prisma.$billPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Bill that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {billFindUniqueOrThrowArgs} args - Arguments to find a Bill
     * @example
     * // Get one Bill
     * const bill = await prisma.bill.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends billFindUniqueOrThrowArgs>(args: SelectSubset<T, billFindUniqueOrThrowArgs<ExtArgs>>): Prisma__billClient<$Result.GetResult<Prisma.$billPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bill that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {billFindFirstArgs} args - Arguments to find a Bill
     * @example
     * // Get one Bill
     * const bill = await prisma.bill.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends billFindFirstArgs>(args?: SelectSubset<T, billFindFirstArgs<ExtArgs>>): Prisma__billClient<$Result.GetResult<Prisma.$billPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bill that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {billFindFirstOrThrowArgs} args - Arguments to find a Bill
     * @example
     * // Get one Bill
     * const bill = await prisma.bill.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends billFindFirstOrThrowArgs>(args?: SelectSubset<T, billFindFirstOrThrowArgs<ExtArgs>>): Prisma__billClient<$Result.GetResult<Prisma.$billPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Bills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {billFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bills
     * const bills = await prisma.bill.findMany()
     * 
     * // Get first 10 Bills
     * const bills = await prisma.bill.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const billWithIdOnly = await prisma.bill.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends billFindManyArgs>(args?: SelectSubset<T, billFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$billPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Bill.
     * @param {billCreateArgs} args - Arguments to create a Bill.
     * @example
     * // Create one Bill
     * const Bill = await prisma.bill.create({
     *   data: {
     *     // ... data to create a Bill
     *   }
     * })
     * 
     */
    create<T extends billCreateArgs>(args: SelectSubset<T, billCreateArgs<ExtArgs>>): Prisma__billClient<$Result.GetResult<Prisma.$billPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Bills.
     * @param {billCreateManyArgs} args - Arguments to create many Bills.
     * @example
     * // Create many Bills
     * const bill = await prisma.bill.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends billCreateManyArgs>(args?: SelectSubset<T, billCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Bill.
     * @param {billDeleteArgs} args - Arguments to delete one Bill.
     * @example
     * // Delete one Bill
     * const Bill = await prisma.bill.delete({
     *   where: {
     *     // ... filter to delete one Bill
     *   }
     * })
     * 
     */
    delete<T extends billDeleteArgs>(args: SelectSubset<T, billDeleteArgs<ExtArgs>>): Prisma__billClient<$Result.GetResult<Prisma.$billPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Bill.
     * @param {billUpdateArgs} args - Arguments to update one Bill.
     * @example
     * // Update one Bill
     * const bill = await prisma.bill.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends billUpdateArgs>(args: SelectSubset<T, billUpdateArgs<ExtArgs>>): Prisma__billClient<$Result.GetResult<Prisma.$billPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Bills.
     * @param {billDeleteManyArgs} args - Arguments to filter Bills to delete.
     * @example
     * // Delete a few Bills
     * const { count } = await prisma.bill.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends billDeleteManyArgs>(args?: SelectSubset<T, billDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {billUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bills
     * const bill = await prisma.bill.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends billUpdateManyArgs>(args: SelectSubset<T, billUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bill.
     * @param {billUpsertArgs} args - Arguments to update or create a Bill.
     * @example
     * // Update or create a Bill
     * const bill = await prisma.bill.upsert({
     *   create: {
     *     // ... data to create a Bill
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bill we want to update
     *   }
     * })
     */
    upsert<T extends billUpsertArgs>(args: SelectSubset<T, billUpsertArgs<ExtArgs>>): Prisma__billClient<$Result.GetResult<Prisma.$billPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Bills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {billCountArgs} args - Arguments to filter Bills to count.
     * @example
     * // Count the number of Bills
     * const count = await prisma.bill.count({
     *   where: {
     *     // ... the filter for the Bills we want to count
     *   }
     * })
    **/
    count<T extends billCountArgs>(
      args?: Subset<T, billCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BillCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BillAggregateArgs>(args: Subset<T, BillAggregateArgs>): Prisma.PrismaPromise<GetBillAggregateType<T>>

    /**
     * Group by Bill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {billGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends billGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: billGroupByArgs['orderBy'] }
        : { orderBy?: billGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, billGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBillGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the bill model
   */
  readonly fields: billFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for bill.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__billClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends clientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, clientDefaultArgs<ExtArgs>>): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    billitem<T extends bill$billitemArgs<ExtArgs> = {}>(args?: Subset<T, bill$billitemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$billitemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the bill model
   */
  interface billFieldRefs {
    readonly id: FieldRef<"bill", 'Int'>
    readonly clientId: FieldRef<"bill", 'Int'>
    readonly totalAmount: FieldRef<"bill", 'Float'>
    readonly createdAt: FieldRef<"bill", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * bill findUnique
   */
  export type billFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bill
     */
    select?: billSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bill
     */
    omit?: billOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: billInclude<ExtArgs> | null
    /**
     * Filter, which bill to fetch.
     */
    where: billWhereUniqueInput
  }

  /**
   * bill findUniqueOrThrow
   */
  export type billFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bill
     */
    select?: billSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bill
     */
    omit?: billOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: billInclude<ExtArgs> | null
    /**
     * Filter, which bill to fetch.
     */
    where: billWhereUniqueInput
  }

  /**
   * bill findFirst
   */
  export type billFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bill
     */
    select?: billSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bill
     */
    omit?: billOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: billInclude<ExtArgs> | null
    /**
     * Filter, which bill to fetch.
     */
    where?: billWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bills to fetch.
     */
    orderBy?: billOrderByWithRelationInput | billOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bills.
     */
    cursor?: billWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bills.
     */
    distinct?: BillScalarFieldEnum | BillScalarFieldEnum[]
  }

  /**
   * bill findFirstOrThrow
   */
  export type billFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bill
     */
    select?: billSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bill
     */
    omit?: billOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: billInclude<ExtArgs> | null
    /**
     * Filter, which bill to fetch.
     */
    where?: billWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bills to fetch.
     */
    orderBy?: billOrderByWithRelationInput | billOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bills.
     */
    cursor?: billWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bills.
     */
    distinct?: BillScalarFieldEnum | BillScalarFieldEnum[]
  }

  /**
   * bill findMany
   */
  export type billFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bill
     */
    select?: billSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bill
     */
    omit?: billOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: billInclude<ExtArgs> | null
    /**
     * Filter, which bills to fetch.
     */
    where?: billWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bills to fetch.
     */
    orderBy?: billOrderByWithRelationInput | billOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing bills.
     */
    cursor?: billWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bills.
     */
    skip?: number
    distinct?: BillScalarFieldEnum | BillScalarFieldEnum[]
  }

  /**
   * bill create
   */
  export type billCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bill
     */
    select?: billSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bill
     */
    omit?: billOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: billInclude<ExtArgs> | null
    /**
     * The data needed to create a bill.
     */
    data: XOR<billCreateInput, billUncheckedCreateInput>
  }

  /**
   * bill createMany
   */
  export type billCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many bills.
     */
    data: billCreateManyInput | billCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * bill update
   */
  export type billUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bill
     */
    select?: billSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bill
     */
    omit?: billOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: billInclude<ExtArgs> | null
    /**
     * The data needed to update a bill.
     */
    data: XOR<billUpdateInput, billUncheckedUpdateInput>
    /**
     * Choose, which bill to update.
     */
    where: billWhereUniqueInput
  }

  /**
   * bill updateMany
   */
  export type billUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update bills.
     */
    data: XOR<billUpdateManyMutationInput, billUncheckedUpdateManyInput>
    /**
     * Filter which bills to update
     */
    where?: billWhereInput
    /**
     * Limit how many bills to update.
     */
    limit?: number
  }

  /**
   * bill upsert
   */
  export type billUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bill
     */
    select?: billSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bill
     */
    omit?: billOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: billInclude<ExtArgs> | null
    /**
     * The filter to search for the bill to update in case it exists.
     */
    where: billWhereUniqueInput
    /**
     * In case the bill found by the `where` argument doesn't exist, create a new bill with this data.
     */
    create: XOR<billCreateInput, billUncheckedCreateInput>
    /**
     * In case the bill was found with the provided `where` argument, update it with this data.
     */
    update: XOR<billUpdateInput, billUncheckedUpdateInput>
  }

  /**
   * bill delete
   */
  export type billDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bill
     */
    select?: billSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bill
     */
    omit?: billOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: billInclude<ExtArgs> | null
    /**
     * Filter which bill to delete.
     */
    where: billWhereUniqueInput
  }

  /**
   * bill deleteMany
   */
  export type billDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which bills to delete
     */
    where?: billWhereInput
    /**
     * Limit how many bills to delete.
     */
    limit?: number
  }

  /**
   * bill.billitem
   */
  export type bill$billitemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the billitem
     */
    select?: billitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the billitem
     */
    omit?: billitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: billitemInclude<ExtArgs> | null
    where?: billitemWhereInput
    orderBy?: billitemOrderByWithRelationInput | billitemOrderByWithRelationInput[]
    cursor?: billitemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BillitemScalarFieldEnum | BillitemScalarFieldEnum[]
  }

  /**
   * bill without action
   */
  export type billDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bill
     */
    select?: billSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bill
     */
    omit?: billOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: billInclude<ExtArgs> | null
  }


  /**
   * Model billitem
   */

  export type AggregateBillitem = {
    _count: BillitemCountAggregateOutputType | null
    _avg: BillitemAvgAggregateOutputType | null
    _sum: BillitemSumAggregateOutputType | null
    _min: BillitemMinAggregateOutputType | null
    _max: BillitemMaxAggregateOutputType | null
  }

  export type BillitemAvgAggregateOutputType = {
    id: number | null
    billId: number | null
    sellingPrice: number | null
  }

  export type BillitemSumAggregateOutputType = {
    id: number | null
    billId: number | null
    sellingPrice: number | null
  }

  export type BillitemMinAggregateOutputType = {
    id: number | null
    billId: number | null
    ornamentId: string | null
    sellingPrice: number | null
  }

  export type BillitemMaxAggregateOutputType = {
    id: number | null
    billId: number | null
    ornamentId: string | null
    sellingPrice: number | null
  }

  export type BillitemCountAggregateOutputType = {
    id: number
    billId: number
    ornamentId: number
    sellingPrice: number
    _all: number
  }


  export type BillitemAvgAggregateInputType = {
    id?: true
    billId?: true
    sellingPrice?: true
  }

  export type BillitemSumAggregateInputType = {
    id?: true
    billId?: true
    sellingPrice?: true
  }

  export type BillitemMinAggregateInputType = {
    id?: true
    billId?: true
    ornamentId?: true
    sellingPrice?: true
  }

  export type BillitemMaxAggregateInputType = {
    id?: true
    billId?: true
    ornamentId?: true
    sellingPrice?: true
  }

  export type BillitemCountAggregateInputType = {
    id?: true
    billId?: true
    ornamentId?: true
    sellingPrice?: true
    _all?: true
  }

  export type BillitemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which billitem to aggregate.
     */
    where?: billitemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of billitems to fetch.
     */
    orderBy?: billitemOrderByWithRelationInput | billitemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: billitemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` billitems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` billitems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned billitems
    **/
    _count?: true | BillitemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BillitemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BillitemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BillitemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BillitemMaxAggregateInputType
  }

  export type GetBillitemAggregateType<T extends BillitemAggregateArgs> = {
        [P in keyof T & keyof AggregateBillitem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBillitem[P]>
      : GetScalarType<T[P], AggregateBillitem[P]>
  }




  export type billitemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: billitemWhereInput
    orderBy?: billitemOrderByWithAggregationInput | billitemOrderByWithAggregationInput[]
    by: BillitemScalarFieldEnum[] | BillitemScalarFieldEnum
    having?: billitemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BillitemCountAggregateInputType | true
    _avg?: BillitemAvgAggregateInputType
    _sum?: BillitemSumAggregateInputType
    _min?: BillitemMinAggregateInputType
    _max?: BillitemMaxAggregateInputType
  }

  export type BillitemGroupByOutputType = {
    id: number
    billId: number
    ornamentId: string
    sellingPrice: number
    _count: BillitemCountAggregateOutputType | null
    _avg: BillitemAvgAggregateOutputType | null
    _sum: BillitemSumAggregateOutputType | null
    _min: BillitemMinAggregateOutputType | null
    _max: BillitemMaxAggregateOutputType | null
  }

  type GetBillitemGroupByPayload<T extends billitemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BillitemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BillitemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BillitemGroupByOutputType[P]>
            : GetScalarType<T[P], BillitemGroupByOutputType[P]>
        }
      >
    >


  export type billitemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    billId?: boolean
    ornamentId?: boolean
    sellingPrice?: boolean
    bill?: boolean | billDefaultArgs<ExtArgs>
    ornament?: boolean | ornamentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["billitem"]>



  export type billitemSelectScalar = {
    id?: boolean
    billId?: boolean
    ornamentId?: boolean
    sellingPrice?: boolean
  }

  export type billitemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "billId" | "ornamentId" | "sellingPrice", ExtArgs["result"]["billitem"]>
  export type billitemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bill?: boolean | billDefaultArgs<ExtArgs>
    ornament?: boolean | ornamentDefaultArgs<ExtArgs>
  }

  export type $billitemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "billitem"
    objects: {
      bill: Prisma.$billPayload<ExtArgs>
      ornament: Prisma.$ornamentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      billId: number
      ornamentId: string
      sellingPrice: number
    }, ExtArgs["result"]["billitem"]>
    composites: {}
  }

  type billitemGetPayload<S extends boolean | null | undefined | billitemDefaultArgs> = $Result.GetResult<Prisma.$billitemPayload, S>

  type billitemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<billitemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BillitemCountAggregateInputType | true
    }

  export interface billitemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['billitem'], meta: { name: 'billitem' } }
    /**
     * Find zero or one Billitem that matches the filter.
     * @param {billitemFindUniqueArgs} args - Arguments to find a Billitem
     * @example
     * // Get one Billitem
     * const billitem = await prisma.billitem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends billitemFindUniqueArgs>(args: SelectSubset<T, billitemFindUniqueArgs<ExtArgs>>): Prisma__billitemClient<$Result.GetResult<Prisma.$billitemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Billitem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {billitemFindUniqueOrThrowArgs} args - Arguments to find a Billitem
     * @example
     * // Get one Billitem
     * const billitem = await prisma.billitem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends billitemFindUniqueOrThrowArgs>(args: SelectSubset<T, billitemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__billitemClient<$Result.GetResult<Prisma.$billitemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Billitem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {billitemFindFirstArgs} args - Arguments to find a Billitem
     * @example
     * // Get one Billitem
     * const billitem = await prisma.billitem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends billitemFindFirstArgs>(args?: SelectSubset<T, billitemFindFirstArgs<ExtArgs>>): Prisma__billitemClient<$Result.GetResult<Prisma.$billitemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Billitem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {billitemFindFirstOrThrowArgs} args - Arguments to find a Billitem
     * @example
     * // Get one Billitem
     * const billitem = await prisma.billitem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends billitemFindFirstOrThrowArgs>(args?: SelectSubset<T, billitemFindFirstOrThrowArgs<ExtArgs>>): Prisma__billitemClient<$Result.GetResult<Prisma.$billitemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Billitems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {billitemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Billitems
     * const billitems = await prisma.billitem.findMany()
     * 
     * // Get first 10 Billitems
     * const billitems = await prisma.billitem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const billitemWithIdOnly = await prisma.billitem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends billitemFindManyArgs>(args?: SelectSubset<T, billitemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$billitemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Billitem.
     * @param {billitemCreateArgs} args - Arguments to create a Billitem.
     * @example
     * // Create one Billitem
     * const Billitem = await prisma.billitem.create({
     *   data: {
     *     // ... data to create a Billitem
     *   }
     * })
     * 
     */
    create<T extends billitemCreateArgs>(args: SelectSubset<T, billitemCreateArgs<ExtArgs>>): Prisma__billitemClient<$Result.GetResult<Prisma.$billitemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Billitems.
     * @param {billitemCreateManyArgs} args - Arguments to create many Billitems.
     * @example
     * // Create many Billitems
     * const billitem = await prisma.billitem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends billitemCreateManyArgs>(args?: SelectSubset<T, billitemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Billitem.
     * @param {billitemDeleteArgs} args - Arguments to delete one Billitem.
     * @example
     * // Delete one Billitem
     * const Billitem = await prisma.billitem.delete({
     *   where: {
     *     // ... filter to delete one Billitem
     *   }
     * })
     * 
     */
    delete<T extends billitemDeleteArgs>(args: SelectSubset<T, billitemDeleteArgs<ExtArgs>>): Prisma__billitemClient<$Result.GetResult<Prisma.$billitemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Billitem.
     * @param {billitemUpdateArgs} args - Arguments to update one Billitem.
     * @example
     * // Update one Billitem
     * const billitem = await prisma.billitem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends billitemUpdateArgs>(args: SelectSubset<T, billitemUpdateArgs<ExtArgs>>): Prisma__billitemClient<$Result.GetResult<Prisma.$billitemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Billitems.
     * @param {billitemDeleteManyArgs} args - Arguments to filter Billitems to delete.
     * @example
     * // Delete a few Billitems
     * const { count } = await prisma.billitem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends billitemDeleteManyArgs>(args?: SelectSubset<T, billitemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Billitems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {billitemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Billitems
     * const billitem = await prisma.billitem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends billitemUpdateManyArgs>(args: SelectSubset<T, billitemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Billitem.
     * @param {billitemUpsertArgs} args - Arguments to update or create a Billitem.
     * @example
     * // Update or create a Billitem
     * const billitem = await prisma.billitem.upsert({
     *   create: {
     *     // ... data to create a Billitem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Billitem we want to update
     *   }
     * })
     */
    upsert<T extends billitemUpsertArgs>(args: SelectSubset<T, billitemUpsertArgs<ExtArgs>>): Prisma__billitemClient<$Result.GetResult<Prisma.$billitemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Billitems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {billitemCountArgs} args - Arguments to filter Billitems to count.
     * @example
     * // Count the number of Billitems
     * const count = await prisma.billitem.count({
     *   where: {
     *     // ... the filter for the Billitems we want to count
     *   }
     * })
    **/
    count<T extends billitemCountArgs>(
      args?: Subset<T, billitemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BillitemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Billitem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillitemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BillitemAggregateArgs>(args: Subset<T, BillitemAggregateArgs>): Prisma.PrismaPromise<GetBillitemAggregateType<T>>

    /**
     * Group by Billitem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {billitemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends billitemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: billitemGroupByArgs['orderBy'] }
        : { orderBy?: billitemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, billitemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBillitemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the billitem model
   */
  readonly fields: billitemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for billitem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__billitemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bill<T extends billDefaultArgs<ExtArgs> = {}>(args?: Subset<T, billDefaultArgs<ExtArgs>>): Prisma__billClient<$Result.GetResult<Prisma.$billPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ornament<T extends ornamentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ornamentDefaultArgs<ExtArgs>>): Prisma__ornamentClient<$Result.GetResult<Prisma.$ornamentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the billitem model
   */
  interface billitemFieldRefs {
    readonly id: FieldRef<"billitem", 'Int'>
    readonly billId: FieldRef<"billitem", 'Int'>
    readonly ornamentId: FieldRef<"billitem", 'String'>
    readonly sellingPrice: FieldRef<"billitem", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * billitem findUnique
   */
  export type billitemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the billitem
     */
    select?: billitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the billitem
     */
    omit?: billitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: billitemInclude<ExtArgs> | null
    /**
     * Filter, which billitem to fetch.
     */
    where: billitemWhereUniqueInput
  }

  /**
   * billitem findUniqueOrThrow
   */
  export type billitemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the billitem
     */
    select?: billitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the billitem
     */
    omit?: billitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: billitemInclude<ExtArgs> | null
    /**
     * Filter, which billitem to fetch.
     */
    where: billitemWhereUniqueInput
  }

  /**
   * billitem findFirst
   */
  export type billitemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the billitem
     */
    select?: billitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the billitem
     */
    omit?: billitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: billitemInclude<ExtArgs> | null
    /**
     * Filter, which billitem to fetch.
     */
    where?: billitemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of billitems to fetch.
     */
    orderBy?: billitemOrderByWithRelationInput | billitemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for billitems.
     */
    cursor?: billitemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` billitems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` billitems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of billitems.
     */
    distinct?: BillitemScalarFieldEnum | BillitemScalarFieldEnum[]
  }

  /**
   * billitem findFirstOrThrow
   */
  export type billitemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the billitem
     */
    select?: billitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the billitem
     */
    omit?: billitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: billitemInclude<ExtArgs> | null
    /**
     * Filter, which billitem to fetch.
     */
    where?: billitemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of billitems to fetch.
     */
    orderBy?: billitemOrderByWithRelationInput | billitemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for billitems.
     */
    cursor?: billitemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` billitems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` billitems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of billitems.
     */
    distinct?: BillitemScalarFieldEnum | BillitemScalarFieldEnum[]
  }

  /**
   * billitem findMany
   */
  export type billitemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the billitem
     */
    select?: billitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the billitem
     */
    omit?: billitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: billitemInclude<ExtArgs> | null
    /**
     * Filter, which billitems to fetch.
     */
    where?: billitemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of billitems to fetch.
     */
    orderBy?: billitemOrderByWithRelationInput | billitemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing billitems.
     */
    cursor?: billitemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` billitems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` billitems.
     */
    skip?: number
    distinct?: BillitemScalarFieldEnum | BillitemScalarFieldEnum[]
  }

  /**
   * billitem create
   */
  export type billitemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the billitem
     */
    select?: billitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the billitem
     */
    omit?: billitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: billitemInclude<ExtArgs> | null
    /**
     * The data needed to create a billitem.
     */
    data: XOR<billitemCreateInput, billitemUncheckedCreateInput>
  }

  /**
   * billitem createMany
   */
  export type billitemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many billitems.
     */
    data: billitemCreateManyInput | billitemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * billitem update
   */
  export type billitemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the billitem
     */
    select?: billitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the billitem
     */
    omit?: billitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: billitemInclude<ExtArgs> | null
    /**
     * The data needed to update a billitem.
     */
    data: XOR<billitemUpdateInput, billitemUncheckedUpdateInput>
    /**
     * Choose, which billitem to update.
     */
    where: billitemWhereUniqueInput
  }

  /**
   * billitem updateMany
   */
  export type billitemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update billitems.
     */
    data: XOR<billitemUpdateManyMutationInput, billitemUncheckedUpdateManyInput>
    /**
     * Filter which billitems to update
     */
    where?: billitemWhereInput
    /**
     * Limit how many billitems to update.
     */
    limit?: number
  }

  /**
   * billitem upsert
   */
  export type billitemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the billitem
     */
    select?: billitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the billitem
     */
    omit?: billitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: billitemInclude<ExtArgs> | null
    /**
     * The filter to search for the billitem to update in case it exists.
     */
    where: billitemWhereUniqueInput
    /**
     * In case the billitem found by the `where` argument doesn't exist, create a new billitem with this data.
     */
    create: XOR<billitemCreateInput, billitemUncheckedCreateInput>
    /**
     * In case the billitem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<billitemUpdateInput, billitemUncheckedUpdateInput>
  }

  /**
   * billitem delete
   */
  export type billitemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the billitem
     */
    select?: billitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the billitem
     */
    omit?: billitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: billitemInclude<ExtArgs> | null
    /**
     * Filter which billitem to delete.
     */
    where: billitemWhereUniqueInput
  }

  /**
   * billitem deleteMany
   */
  export type billitemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which billitems to delete
     */
    where?: billitemWhereInput
    /**
     * Limit how many billitems to delete.
     */
    limit?: number
  }

  /**
   * billitem without action
   */
  export type billitemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the billitem
     */
    select?: billitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the billitem
     */
    omit?: billitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: billitemInclude<ExtArgs> | null
  }


  /**
   * Model client
   */

  export type AggregateClient = {
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  export type ClientAvgAggregateOutputType = {
    id: number | null
  }

  export type ClientSumAggregateOutputType = {
    id: number | null
  }

  export type ClientMinAggregateOutputType = {
    id: number | null
    name: string | null
    phone: string | null
    email: string | null
  }

  export type ClientMaxAggregateOutputType = {
    id: number | null
    name: string | null
    phone: string | null
    email: string | null
  }

  export type ClientCountAggregateOutputType = {
    id: number
    name: number
    phone: number
    email: number
    _all: number
  }


  export type ClientAvgAggregateInputType = {
    id?: true
  }

  export type ClientSumAggregateInputType = {
    id?: true
  }

  export type ClientMinAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
  }

  export type ClientMaxAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
  }

  export type ClientCountAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    _all?: true
  }

  export type ClientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which client to aggregate.
     */
    where?: clientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: clientOrderByWithRelationInput | clientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: clientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clients
    **/
    _count?: true | ClientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientMaxAggregateInputType
  }

  export type GetClientAggregateType<T extends ClientAggregateArgs> = {
        [P in keyof T & keyof AggregateClient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClient[P]>
      : GetScalarType<T[P], AggregateClient[P]>
  }




  export type clientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: clientWhereInput
    orderBy?: clientOrderByWithAggregationInput | clientOrderByWithAggregationInput[]
    by: ClientScalarFieldEnum[] | ClientScalarFieldEnum
    having?: clientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientCountAggregateInputType | true
    _avg?: ClientAvgAggregateInputType
    _sum?: ClientSumAggregateInputType
    _min?: ClientMinAggregateInputType
    _max?: ClientMaxAggregateInputType
  }

  export type ClientGroupByOutputType = {
    id: number
    name: string
    phone: string
    email: string
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  type GetClientGroupByPayload<T extends clientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientGroupByOutputType[P]>
            : GetScalarType<T[P], ClientGroupByOutputType[P]>
        }
      >
    >


  export type clientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    bill?: boolean | client$billArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>



  export type clientSelectScalar = {
    id?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
  }

  export type clientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "phone" | "email", ExtArgs["result"]["client"]>
  export type clientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bill?: boolean | client$billArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $clientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "client"
    objects: {
      bill: Prisma.$billPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      phone: string
      email: string
    }, ExtArgs["result"]["client"]>
    composites: {}
  }

  type clientGetPayload<S extends boolean | null | undefined | clientDefaultArgs> = $Result.GetResult<Prisma.$clientPayload, S>

  type clientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<clientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClientCountAggregateInputType | true
    }

  export interface clientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['client'], meta: { name: 'client' } }
    /**
     * Find zero or one Client that matches the filter.
     * @param {clientFindUniqueArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends clientFindUniqueArgs>(args: SelectSubset<T, clientFindUniqueArgs<ExtArgs>>): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Client that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {clientFindUniqueOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends clientFindUniqueOrThrowArgs>(args: SelectSubset<T, clientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Client that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientFindFirstArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends clientFindFirstArgs>(args?: SelectSubset<T, clientFindFirstArgs<ExtArgs>>): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Client that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientFindFirstOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends clientFindFirstOrThrowArgs>(args?: SelectSubset<T, clientFindFirstOrThrowArgs<ExtArgs>>): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.client.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.client.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientWithIdOnly = await prisma.client.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends clientFindManyArgs>(args?: SelectSubset<T, clientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Client.
     * @param {clientCreateArgs} args - Arguments to create a Client.
     * @example
     * // Create one Client
     * const Client = await prisma.client.create({
     *   data: {
     *     // ... data to create a Client
     *   }
     * })
     * 
     */
    create<T extends clientCreateArgs>(args: SelectSubset<T, clientCreateArgs<ExtArgs>>): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clients.
     * @param {clientCreateManyArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends clientCreateManyArgs>(args?: SelectSubset<T, clientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Client.
     * @param {clientDeleteArgs} args - Arguments to delete one Client.
     * @example
     * // Delete one Client
     * const Client = await prisma.client.delete({
     *   where: {
     *     // ... filter to delete one Client
     *   }
     * })
     * 
     */
    delete<T extends clientDeleteArgs>(args: SelectSubset<T, clientDeleteArgs<ExtArgs>>): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Client.
     * @param {clientUpdateArgs} args - Arguments to update one Client.
     * @example
     * // Update one Client
     * const client = await prisma.client.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends clientUpdateArgs>(args: SelectSubset<T, clientUpdateArgs<ExtArgs>>): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clients.
     * @param {clientDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.client.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends clientDeleteManyArgs>(args?: SelectSubset<T, clientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends clientUpdateManyArgs>(args: SelectSubset<T, clientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Client.
     * @param {clientUpsertArgs} args - Arguments to update or create a Client.
     * @example
     * // Update or create a Client
     * const client = await prisma.client.upsert({
     *   create: {
     *     // ... data to create a Client
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Client we want to update
     *   }
     * })
     */
    upsert<T extends clientUpsertArgs>(args: SelectSubset<T, clientUpsertArgs<ExtArgs>>): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.client.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends clientCountArgs>(
      args?: Subset<T, clientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientAggregateArgs>(args: Subset<T, ClientAggregateArgs>): Prisma.PrismaPromise<GetClientAggregateType<T>>

    /**
     * Group by Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends clientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: clientGroupByArgs['orderBy'] }
        : { orderBy?: clientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, clientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the client model
   */
  readonly fields: clientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for client.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__clientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bill<T extends client$billArgs<ExtArgs> = {}>(args?: Subset<T, client$billArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$billPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the client model
   */
  interface clientFieldRefs {
    readonly id: FieldRef<"client", 'Int'>
    readonly name: FieldRef<"client", 'String'>
    readonly phone: FieldRef<"client", 'String'>
    readonly email: FieldRef<"client", 'String'>
  }
    

  // Custom InputTypes
  /**
   * client findUnique
   */
  export type clientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the client
     */
    omit?: clientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * Filter, which client to fetch.
     */
    where: clientWhereUniqueInput
  }

  /**
   * client findUniqueOrThrow
   */
  export type clientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the client
     */
    omit?: clientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * Filter, which client to fetch.
     */
    where: clientWhereUniqueInput
  }

  /**
   * client findFirst
   */
  export type clientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the client
     */
    omit?: clientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * Filter, which client to fetch.
     */
    where?: clientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: clientOrderByWithRelationInput | clientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clients.
     */
    cursor?: clientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * client findFirstOrThrow
   */
  export type clientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the client
     */
    omit?: clientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * Filter, which client to fetch.
     */
    where?: clientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: clientOrderByWithRelationInput | clientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clients.
     */
    cursor?: clientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * client findMany
   */
  export type clientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the client
     */
    omit?: clientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * Filter, which clients to fetch.
     */
    where?: clientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: clientOrderByWithRelationInput | clientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clients.
     */
    cursor?: clientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * client create
   */
  export type clientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the client
     */
    omit?: clientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * The data needed to create a client.
     */
    data: XOR<clientCreateInput, clientUncheckedCreateInput>
  }

  /**
   * client createMany
   */
  export type clientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many clients.
     */
    data: clientCreateManyInput | clientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * client update
   */
  export type clientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the client
     */
    omit?: clientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * The data needed to update a client.
     */
    data: XOR<clientUpdateInput, clientUncheckedUpdateInput>
    /**
     * Choose, which client to update.
     */
    where: clientWhereUniqueInput
  }

  /**
   * client updateMany
   */
  export type clientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update clients.
     */
    data: XOR<clientUpdateManyMutationInput, clientUncheckedUpdateManyInput>
    /**
     * Filter which clients to update
     */
    where?: clientWhereInput
    /**
     * Limit how many clients to update.
     */
    limit?: number
  }

  /**
   * client upsert
   */
  export type clientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the client
     */
    omit?: clientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * The filter to search for the client to update in case it exists.
     */
    where: clientWhereUniqueInput
    /**
     * In case the client found by the `where` argument doesn't exist, create a new client with this data.
     */
    create: XOR<clientCreateInput, clientUncheckedCreateInput>
    /**
     * In case the client was found with the provided `where` argument, update it with this data.
     */
    update: XOR<clientUpdateInput, clientUncheckedUpdateInput>
  }

  /**
   * client delete
   */
  export type clientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the client
     */
    omit?: clientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * Filter which client to delete.
     */
    where: clientWhereUniqueInput
  }

  /**
   * client deleteMany
   */
  export type clientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which clients to delete
     */
    where?: clientWhereInput
    /**
     * Limit how many clients to delete.
     */
    limit?: number
  }

  /**
   * client.bill
   */
  export type client$billArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bill
     */
    select?: billSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bill
     */
    omit?: billOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: billInclude<ExtArgs> | null
    where?: billWhereInput
    orderBy?: billOrderByWithRelationInput | billOrderByWithRelationInput[]
    cursor?: billWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BillScalarFieldEnum | BillScalarFieldEnum[]
  }

  /**
   * client without action
   */
  export type clientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the client
     */
    omit?: clientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
  }


  /**
   * Model merchant
   */

  export type AggregateMerchant = {
    _count: MerchantCountAggregateOutputType | null
    _min: MerchantMinAggregateOutputType | null
    _max: MerchantMaxAggregateOutputType | null
  }

  export type MerchantMinAggregateOutputType = {
    merchantCode: string | null
    name: string | null
    phone: string | null
  }

  export type MerchantMaxAggregateOutputType = {
    merchantCode: string | null
    name: string | null
    phone: string | null
  }

  export type MerchantCountAggregateOutputType = {
    merchantCode: number
    name: number
    phone: number
    _all: number
  }


  export type MerchantMinAggregateInputType = {
    merchantCode?: true
    name?: true
    phone?: true
  }

  export type MerchantMaxAggregateInputType = {
    merchantCode?: true
    name?: true
    phone?: true
  }

  export type MerchantCountAggregateInputType = {
    merchantCode?: true
    name?: true
    phone?: true
    _all?: true
  }

  export type MerchantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which merchant to aggregate.
     */
    where?: merchantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of merchants to fetch.
     */
    orderBy?: merchantOrderByWithRelationInput | merchantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: merchantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` merchants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` merchants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned merchants
    **/
    _count?: true | MerchantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MerchantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MerchantMaxAggregateInputType
  }

  export type GetMerchantAggregateType<T extends MerchantAggregateArgs> = {
        [P in keyof T & keyof AggregateMerchant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMerchant[P]>
      : GetScalarType<T[P], AggregateMerchant[P]>
  }




  export type merchantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: merchantWhereInput
    orderBy?: merchantOrderByWithAggregationInput | merchantOrderByWithAggregationInput[]
    by: MerchantScalarFieldEnum[] | MerchantScalarFieldEnum
    having?: merchantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MerchantCountAggregateInputType | true
    _min?: MerchantMinAggregateInputType
    _max?: MerchantMaxAggregateInputType
  }

  export type MerchantGroupByOutputType = {
    merchantCode: string
    name: string
    phone: string
    _count: MerchantCountAggregateOutputType | null
    _min: MerchantMinAggregateOutputType | null
    _max: MerchantMaxAggregateOutputType | null
  }

  type GetMerchantGroupByPayload<T extends merchantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MerchantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MerchantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MerchantGroupByOutputType[P]>
            : GetScalarType<T[P], MerchantGroupByOutputType[P]>
        }
      >
    >


  export type merchantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    merchantCode?: boolean
    name?: boolean
    phone?: boolean
    ornament?: boolean | merchant$ornamentArgs<ExtArgs>
    _count?: boolean | MerchantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["merchant"]>



  export type merchantSelectScalar = {
    merchantCode?: boolean
    name?: boolean
    phone?: boolean
  }

  export type merchantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"merchantCode" | "name" | "phone", ExtArgs["result"]["merchant"]>
  export type merchantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ornament?: boolean | merchant$ornamentArgs<ExtArgs>
    _count?: boolean | MerchantCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $merchantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "merchant"
    objects: {
      ornament: Prisma.$ornamentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      merchantCode: string
      name: string
      phone: string
    }, ExtArgs["result"]["merchant"]>
    composites: {}
  }

  type merchantGetPayload<S extends boolean | null | undefined | merchantDefaultArgs> = $Result.GetResult<Prisma.$merchantPayload, S>

  type merchantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<merchantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MerchantCountAggregateInputType | true
    }

  export interface merchantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['merchant'], meta: { name: 'merchant' } }
    /**
     * Find zero or one Merchant that matches the filter.
     * @param {merchantFindUniqueArgs} args - Arguments to find a Merchant
     * @example
     * // Get one Merchant
     * const merchant = await prisma.merchant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends merchantFindUniqueArgs>(args: SelectSubset<T, merchantFindUniqueArgs<ExtArgs>>): Prisma__merchantClient<$Result.GetResult<Prisma.$merchantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Merchant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {merchantFindUniqueOrThrowArgs} args - Arguments to find a Merchant
     * @example
     * // Get one Merchant
     * const merchant = await prisma.merchant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends merchantFindUniqueOrThrowArgs>(args: SelectSubset<T, merchantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__merchantClient<$Result.GetResult<Prisma.$merchantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Merchant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {merchantFindFirstArgs} args - Arguments to find a Merchant
     * @example
     * // Get one Merchant
     * const merchant = await prisma.merchant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends merchantFindFirstArgs>(args?: SelectSubset<T, merchantFindFirstArgs<ExtArgs>>): Prisma__merchantClient<$Result.GetResult<Prisma.$merchantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Merchant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {merchantFindFirstOrThrowArgs} args - Arguments to find a Merchant
     * @example
     * // Get one Merchant
     * const merchant = await prisma.merchant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends merchantFindFirstOrThrowArgs>(args?: SelectSubset<T, merchantFindFirstOrThrowArgs<ExtArgs>>): Prisma__merchantClient<$Result.GetResult<Prisma.$merchantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Merchants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {merchantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Merchants
     * const merchants = await prisma.merchant.findMany()
     * 
     * // Get first 10 Merchants
     * const merchants = await prisma.merchant.findMany({ take: 10 })
     * 
     * // Only select the `merchantCode`
     * const merchantWithMerchantCodeOnly = await prisma.merchant.findMany({ select: { merchantCode: true } })
     * 
     */
    findMany<T extends merchantFindManyArgs>(args?: SelectSubset<T, merchantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$merchantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Merchant.
     * @param {merchantCreateArgs} args - Arguments to create a Merchant.
     * @example
     * // Create one Merchant
     * const Merchant = await prisma.merchant.create({
     *   data: {
     *     // ... data to create a Merchant
     *   }
     * })
     * 
     */
    create<T extends merchantCreateArgs>(args: SelectSubset<T, merchantCreateArgs<ExtArgs>>): Prisma__merchantClient<$Result.GetResult<Prisma.$merchantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Merchants.
     * @param {merchantCreateManyArgs} args - Arguments to create many Merchants.
     * @example
     * // Create many Merchants
     * const merchant = await prisma.merchant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends merchantCreateManyArgs>(args?: SelectSubset<T, merchantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Merchant.
     * @param {merchantDeleteArgs} args - Arguments to delete one Merchant.
     * @example
     * // Delete one Merchant
     * const Merchant = await prisma.merchant.delete({
     *   where: {
     *     // ... filter to delete one Merchant
     *   }
     * })
     * 
     */
    delete<T extends merchantDeleteArgs>(args: SelectSubset<T, merchantDeleteArgs<ExtArgs>>): Prisma__merchantClient<$Result.GetResult<Prisma.$merchantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Merchant.
     * @param {merchantUpdateArgs} args - Arguments to update one Merchant.
     * @example
     * // Update one Merchant
     * const merchant = await prisma.merchant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends merchantUpdateArgs>(args: SelectSubset<T, merchantUpdateArgs<ExtArgs>>): Prisma__merchantClient<$Result.GetResult<Prisma.$merchantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Merchants.
     * @param {merchantDeleteManyArgs} args - Arguments to filter Merchants to delete.
     * @example
     * // Delete a few Merchants
     * const { count } = await prisma.merchant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends merchantDeleteManyArgs>(args?: SelectSubset<T, merchantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Merchants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {merchantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Merchants
     * const merchant = await prisma.merchant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends merchantUpdateManyArgs>(args: SelectSubset<T, merchantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Merchant.
     * @param {merchantUpsertArgs} args - Arguments to update or create a Merchant.
     * @example
     * // Update or create a Merchant
     * const merchant = await prisma.merchant.upsert({
     *   create: {
     *     // ... data to create a Merchant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Merchant we want to update
     *   }
     * })
     */
    upsert<T extends merchantUpsertArgs>(args: SelectSubset<T, merchantUpsertArgs<ExtArgs>>): Prisma__merchantClient<$Result.GetResult<Prisma.$merchantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Merchants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {merchantCountArgs} args - Arguments to filter Merchants to count.
     * @example
     * // Count the number of Merchants
     * const count = await prisma.merchant.count({
     *   where: {
     *     // ... the filter for the Merchants we want to count
     *   }
     * })
    **/
    count<T extends merchantCountArgs>(
      args?: Subset<T, merchantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MerchantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Merchant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MerchantAggregateArgs>(args: Subset<T, MerchantAggregateArgs>): Prisma.PrismaPromise<GetMerchantAggregateType<T>>

    /**
     * Group by Merchant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {merchantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends merchantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: merchantGroupByArgs['orderBy'] }
        : { orderBy?: merchantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, merchantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMerchantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the merchant model
   */
  readonly fields: merchantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for merchant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__merchantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ornament<T extends merchant$ornamentArgs<ExtArgs> = {}>(args?: Subset<T, merchant$ornamentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ornamentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the merchant model
   */
  interface merchantFieldRefs {
    readonly merchantCode: FieldRef<"merchant", 'String'>
    readonly name: FieldRef<"merchant", 'String'>
    readonly phone: FieldRef<"merchant", 'String'>
  }
    

  // Custom InputTypes
  /**
   * merchant findUnique
   */
  export type merchantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the merchant
     */
    select?: merchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the merchant
     */
    omit?: merchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: merchantInclude<ExtArgs> | null
    /**
     * Filter, which merchant to fetch.
     */
    where: merchantWhereUniqueInput
  }

  /**
   * merchant findUniqueOrThrow
   */
  export type merchantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the merchant
     */
    select?: merchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the merchant
     */
    omit?: merchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: merchantInclude<ExtArgs> | null
    /**
     * Filter, which merchant to fetch.
     */
    where: merchantWhereUniqueInput
  }

  /**
   * merchant findFirst
   */
  export type merchantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the merchant
     */
    select?: merchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the merchant
     */
    omit?: merchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: merchantInclude<ExtArgs> | null
    /**
     * Filter, which merchant to fetch.
     */
    where?: merchantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of merchants to fetch.
     */
    orderBy?: merchantOrderByWithRelationInput | merchantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for merchants.
     */
    cursor?: merchantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` merchants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` merchants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of merchants.
     */
    distinct?: MerchantScalarFieldEnum | MerchantScalarFieldEnum[]
  }

  /**
   * merchant findFirstOrThrow
   */
  export type merchantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the merchant
     */
    select?: merchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the merchant
     */
    omit?: merchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: merchantInclude<ExtArgs> | null
    /**
     * Filter, which merchant to fetch.
     */
    where?: merchantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of merchants to fetch.
     */
    orderBy?: merchantOrderByWithRelationInput | merchantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for merchants.
     */
    cursor?: merchantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` merchants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` merchants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of merchants.
     */
    distinct?: MerchantScalarFieldEnum | MerchantScalarFieldEnum[]
  }

  /**
   * merchant findMany
   */
  export type merchantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the merchant
     */
    select?: merchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the merchant
     */
    omit?: merchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: merchantInclude<ExtArgs> | null
    /**
     * Filter, which merchants to fetch.
     */
    where?: merchantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of merchants to fetch.
     */
    orderBy?: merchantOrderByWithRelationInput | merchantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing merchants.
     */
    cursor?: merchantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` merchants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` merchants.
     */
    skip?: number
    distinct?: MerchantScalarFieldEnum | MerchantScalarFieldEnum[]
  }

  /**
   * merchant create
   */
  export type merchantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the merchant
     */
    select?: merchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the merchant
     */
    omit?: merchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: merchantInclude<ExtArgs> | null
    /**
     * The data needed to create a merchant.
     */
    data: XOR<merchantCreateInput, merchantUncheckedCreateInput>
  }

  /**
   * merchant createMany
   */
  export type merchantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many merchants.
     */
    data: merchantCreateManyInput | merchantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * merchant update
   */
  export type merchantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the merchant
     */
    select?: merchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the merchant
     */
    omit?: merchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: merchantInclude<ExtArgs> | null
    /**
     * The data needed to update a merchant.
     */
    data: XOR<merchantUpdateInput, merchantUncheckedUpdateInput>
    /**
     * Choose, which merchant to update.
     */
    where: merchantWhereUniqueInput
  }

  /**
   * merchant updateMany
   */
  export type merchantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update merchants.
     */
    data: XOR<merchantUpdateManyMutationInput, merchantUncheckedUpdateManyInput>
    /**
     * Filter which merchants to update
     */
    where?: merchantWhereInput
    /**
     * Limit how many merchants to update.
     */
    limit?: number
  }

  /**
   * merchant upsert
   */
  export type merchantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the merchant
     */
    select?: merchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the merchant
     */
    omit?: merchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: merchantInclude<ExtArgs> | null
    /**
     * The filter to search for the merchant to update in case it exists.
     */
    where: merchantWhereUniqueInput
    /**
     * In case the merchant found by the `where` argument doesn't exist, create a new merchant with this data.
     */
    create: XOR<merchantCreateInput, merchantUncheckedCreateInput>
    /**
     * In case the merchant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<merchantUpdateInput, merchantUncheckedUpdateInput>
  }

  /**
   * merchant delete
   */
  export type merchantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the merchant
     */
    select?: merchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the merchant
     */
    omit?: merchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: merchantInclude<ExtArgs> | null
    /**
     * Filter which merchant to delete.
     */
    where: merchantWhereUniqueInput
  }

  /**
   * merchant deleteMany
   */
  export type merchantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which merchants to delete
     */
    where?: merchantWhereInput
    /**
     * Limit how many merchants to delete.
     */
    limit?: number
  }

  /**
   * merchant.ornament
   */
  export type merchant$ornamentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ornament
     */
    select?: ornamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ornament
     */
    omit?: ornamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ornamentInclude<ExtArgs> | null
    where?: ornamentWhereInput
    orderBy?: ornamentOrderByWithRelationInput | ornamentOrderByWithRelationInput[]
    cursor?: ornamentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrnamentScalarFieldEnum | OrnamentScalarFieldEnum[]
  }

  /**
   * merchant without action
   */
  export type merchantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the merchant
     */
    select?: merchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the merchant
     */
    omit?: merchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: merchantInclude<ExtArgs> | null
  }


  /**
   * Model ornament
   */

  export type AggregateOrnament = {
    _count: OrnamentCountAggregateOutputType | null
    _avg: OrnamentAvgAggregateOutputType | null
    _sum: OrnamentSumAggregateOutputType | null
    _min: OrnamentMinAggregateOutputType | null
    _max: OrnamentMaxAggregateOutputType | null
  }

  export type OrnamentAvgAggregateOutputType = {
    id: number | null
    weight: number | null
    costPrice: number | null
  }

  export type OrnamentSumAggregateOutputType = {
    id: number | null
    weight: number | null
    costPrice: number | null
  }

  export type OrnamentMinAggregateOutputType = {
    id: number | null
    ornamentId: string | null
    type: string | null
    merchantCode: string | null
    weight: number | null
    costPrice: number | null
    purity: string | null
    qrCode: string | null
    isSold: boolean | null
    createdAt: Date | null
  }

  export type OrnamentMaxAggregateOutputType = {
    id: number | null
    ornamentId: string | null
    type: string | null
    merchantCode: string | null
    weight: number | null
    costPrice: number | null
    purity: string | null
    qrCode: string | null
    isSold: boolean | null
    createdAt: Date | null
  }

  export type OrnamentCountAggregateOutputType = {
    id: number
    ornamentId: number
    type: number
    merchantCode: number
    weight: number
    costPrice: number
    purity: number
    qrCode: number
    isSold: number
    createdAt: number
    _all: number
  }


  export type OrnamentAvgAggregateInputType = {
    id?: true
    weight?: true
    costPrice?: true
  }

  export type OrnamentSumAggregateInputType = {
    id?: true
    weight?: true
    costPrice?: true
  }

  export type OrnamentMinAggregateInputType = {
    id?: true
    ornamentId?: true
    type?: true
    merchantCode?: true
    weight?: true
    costPrice?: true
    purity?: true
    qrCode?: true
    isSold?: true
    createdAt?: true
  }

  export type OrnamentMaxAggregateInputType = {
    id?: true
    ornamentId?: true
    type?: true
    merchantCode?: true
    weight?: true
    costPrice?: true
    purity?: true
    qrCode?: true
    isSold?: true
    createdAt?: true
  }

  export type OrnamentCountAggregateInputType = {
    id?: true
    ornamentId?: true
    type?: true
    merchantCode?: true
    weight?: true
    costPrice?: true
    purity?: true
    qrCode?: true
    isSold?: true
    createdAt?: true
    _all?: true
  }

  export type OrnamentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ornament to aggregate.
     */
    where?: ornamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ornaments to fetch.
     */
    orderBy?: ornamentOrderByWithRelationInput | ornamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ornamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ornaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ornaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ornaments
    **/
    _count?: true | OrnamentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrnamentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrnamentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrnamentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrnamentMaxAggregateInputType
  }

  export type GetOrnamentAggregateType<T extends OrnamentAggregateArgs> = {
        [P in keyof T & keyof AggregateOrnament]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrnament[P]>
      : GetScalarType<T[P], AggregateOrnament[P]>
  }




  export type ornamentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ornamentWhereInput
    orderBy?: ornamentOrderByWithAggregationInput | ornamentOrderByWithAggregationInput[]
    by: OrnamentScalarFieldEnum[] | OrnamentScalarFieldEnum
    having?: ornamentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrnamentCountAggregateInputType | true
    _avg?: OrnamentAvgAggregateInputType
    _sum?: OrnamentSumAggregateInputType
    _min?: OrnamentMinAggregateInputType
    _max?: OrnamentMaxAggregateInputType
  }

  export type OrnamentGroupByOutputType = {
    id: number
    ornamentId: string
    type: string
    merchantCode: string
    weight: number
    costPrice: number
    purity: string
    qrCode: string | null
    isSold: boolean
    createdAt: Date
    _count: OrnamentCountAggregateOutputType | null
    _avg: OrnamentAvgAggregateOutputType | null
    _sum: OrnamentSumAggregateOutputType | null
    _min: OrnamentMinAggregateOutputType | null
    _max: OrnamentMaxAggregateOutputType | null
  }

  type GetOrnamentGroupByPayload<T extends ornamentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrnamentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrnamentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrnamentGroupByOutputType[P]>
            : GetScalarType<T[P], OrnamentGroupByOutputType[P]>
        }
      >
    >


  export type ornamentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ornamentId?: boolean
    type?: boolean
    merchantCode?: boolean
    weight?: boolean
    costPrice?: boolean
    purity?: boolean
    qrCode?: boolean
    isSold?: boolean
    createdAt?: boolean
    billitem?: boolean | ornament$billitemArgs<ExtArgs>
    merchant?: boolean | merchantDefaultArgs<ExtArgs>
    _count?: boolean | OrnamentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ornament"]>



  export type ornamentSelectScalar = {
    id?: boolean
    ornamentId?: boolean
    type?: boolean
    merchantCode?: boolean
    weight?: boolean
    costPrice?: boolean
    purity?: boolean
    qrCode?: boolean
    isSold?: boolean
    createdAt?: boolean
  }

  export type ornamentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ornamentId" | "type" | "merchantCode" | "weight" | "costPrice" | "purity" | "qrCode" | "isSold" | "createdAt", ExtArgs["result"]["ornament"]>
  export type ornamentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    billitem?: boolean | ornament$billitemArgs<ExtArgs>
    merchant?: boolean | merchantDefaultArgs<ExtArgs>
    _count?: boolean | OrnamentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ornamentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ornament"
    objects: {
      billitem: Prisma.$billitemPayload<ExtArgs>[]
      merchant: Prisma.$merchantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ornamentId: string
      type: string
      merchantCode: string
      weight: number
      costPrice: number
      purity: string
      qrCode: string | null
      isSold: boolean
      createdAt: Date
    }, ExtArgs["result"]["ornament"]>
    composites: {}
  }

  type ornamentGetPayload<S extends boolean | null | undefined | ornamentDefaultArgs> = $Result.GetResult<Prisma.$ornamentPayload, S>

  type ornamentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ornamentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrnamentCountAggregateInputType | true
    }

  export interface ornamentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ornament'], meta: { name: 'ornament' } }
    /**
     * Find zero or one Ornament that matches the filter.
     * @param {ornamentFindUniqueArgs} args - Arguments to find a Ornament
     * @example
     * // Get one Ornament
     * const ornament = await prisma.ornament.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ornamentFindUniqueArgs>(args: SelectSubset<T, ornamentFindUniqueArgs<ExtArgs>>): Prisma__ornamentClient<$Result.GetResult<Prisma.$ornamentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ornament that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ornamentFindUniqueOrThrowArgs} args - Arguments to find a Ornament
     * @example
     * // Get one Ornament
     * const ornament = await prisma.ornament.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ornamentFindUniqueOrThrowArgs>(args: SelectSubset<T, ornamentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ornamentClient<$Result.GetResult<Prisma.$ornamentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ornament that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ornamentFindFirstArgs} args - Arguments to find a Ornament
     * @example
     * // Get one Ornament
     * const ornament = await prisma.ornament.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ornamentFindFirstArgs>(args?: SelectSubset<T, ornamentFindFirstArgs<ExtArgs>>): Prisma__ornamentClient<$Result.GetResult<Prisma.$ornamentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ornament that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ornamentFindFirstOrThrowArgs} args - Arguments to find a Ornament
     * @example
     * // Get one Ornament
     * const ornament = await prisma.ornament.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ornamentFindFirstOrThrowArgs>(args?: SelectSubset<T, ornamentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ornamentClient<$Result.GetResult<Prisma.$ornamentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ornaments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ornamentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ornaments
     * const ornaments = await prisma.ornament.findMany()
     * 
     * // Get first 10 Ornaments
     * const ornaments = await prisma.ornament.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ornamentWithIdOnly = await prisma.ornament.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ornamentFindManyArgs>(args?: SelectSubset<T, ornamentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ornamentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ornament.
     * @param {ornamentCreateArgs} args - Arguments to create a Ornament.
     * @example
     * // Create one Ornament
     * const Ornament = await prisma.ornament.create({
     *   data: {
     *     // ... data to create a Ornament
     *   }
     * })
     * 
     */
    create<T extends ornamentCreateArgs>(args: SelectSubset<T, ornamentCreateArgs<ExtArgs>>): Prisma__ornamentClient<$Result.GetResult<Prisma.$ornamentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ornaments.
     * @param {ornamentCreateManyArgs} args - Arguments to create many Ornaments.
     * @example
     * // Create many Ornaments
     * const ornament = await prisma.ornament.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ornamentCreateManyArgs>(args?: SelectSubset<T, ornamentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ornament.
     * @param {ornamentDeleteArgs} args - Arguments to delete one Ornament.
     * @example
     * // Delete one Ornament
     * const Ornament = await prisma.ornament.delete({
     *   where: {
     *     // ... filter to delete one Ornament
     *   }
     * })
     * 
     */
    delete<T extends ornamentDeleteArgs>(args: SelectSubset<T, ornamentDeleteArgs<ExtArgs>>): Prisma__ornamentClient<$Result.GetResult<Prisma.$ornamentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ornament.
     * @param {ornamentUpdateArgs} args - Arguments to update one Ornament.
     * @example
     * // Update one Ornament
     * const ornament = await prisma.ornament.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ornamentUpdateArgs>(args: SelectSubset<T, ornamentUpdateArgs<ExtArgs>>): Prisma__ornamentClient<$Result.GetResult<Prisma.$ornamentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ornaments.
     * @param {ornamentDeleteManyArgs} args - Arguments to filter Ornaments to delete.
     * @example
     * // Delete a few Ornaments
     * const { count } = await prisma.ornament.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ornamentDeleteManyArgs>(args?: SelectSubset<T, ornamentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ornaments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ornamentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ornaments
     * const ornament = await prisma.ornament.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ornamentUpdateManyArgs>(args: SelectSubset<T, ornamentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ornament.
     * @param {ornamentUpsertArgs} args - Arguments to update or create a Ornament.
     * @example
     * // Update or create a Ornament
     * const ornament = await prisma.ornament.upsert({
     *   create: {
     *     // ... data to create a Ornament
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ornament we want to update
     *   }
     * })
     */
    upsert<T extends ornamentUpsertArgs>(args: SelectSubset<T, ornamentUpsertArgs<ExtArgs>>): Prisma__ornamentClient<$Result.GetResult<Prisma.$ornamentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ornaments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ornamentCountArgs} args - Arguments to filter Ornaments to count.
     * @example
     * // Count the number of Ornaments
     * const count = await prisma.ornament.count({
     *   where: {
     *     // ... the filter for the Ornaments we want to count
     *   }
     * })
    **/
    count<T extends ornamentCountArgs>(
      args?: Subset<T, ornamentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrnamentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ornament.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrnamentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrnamentAggregateArgs>(args: Subset<T, OrnamentAggregateArgs>): Prisma.PrismaPromise<GetOrnamentAggregateType<T>>

    /**
     * Group by Ornament.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ornamentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ornamentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ornamentGroupByArgs['orderBy'] }
        : { orderBy?: ornamentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ornamentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrnamentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ornament model
   */
  readonly fields: ornamentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ornament.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ornamentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    billitem<T extends ornament$billitemArgs<ExtArgs> = {}>(args?: Subset<T, ornament$billitemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$billitemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    merchant<T extends merchantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, merchantDefaultArgs<ExtArgs>>): Prisma__merchantClient<$Result.GetResult<Prisma.$merchantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ornament model
   */
  interface ornamentFieldRefs {
    readonly id: FieldRef<"ornament", 'Int'>
    readonly ornamentId: FieldRef<"ornament", 'String'>
    readonly type: FieldRef<"ornament", 'String'>
    readonly merchantCode: FieldRef<"ornament", 'String'>
    readonly weight: FieldRef<"ornament", 'Float'>
    readonly costPrice: FieldRef<"ornament", 'Float'>
    readonly purity: FieldRef<"ornament", 'String'>
    readonly qrCode: FieldRef<"ornament", 'String'>
    readonly isSold: FieldRef<"ornament", 'Boolean'>
    readonly createdAt: FieldRef<"ornament", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ornament findUnique
   */
  export type ornamentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ornament
     */
    select?: ornamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ornament
     */
    omit?: ornamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ornamentInclude<ExtArgs> | null
    /**
     * Filter, which ornament to fetch.
     */
    where: ornamentWhereUniqueInput
  }

  /**
   * ornament findUniqueOrThrow
   */
  export type ornamentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ornament
     */
    select?: ornamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ornament
     */
    omit?: ornamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ornamentInclude<ExtArgs> | null
    /**
     * Filter, which ornament to fetch.
     */
    where: ornamentWhereUniqueInput
  }

  /**
   * ornament findFirst
   */
  export type ornamentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ornament
     */
    select?: ornamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ornament
     */
    omit?: ornamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ornamentInclude<ExtArgs> | null
    /**
     * Filter, which ornament to fetch.
     */
    where?: ornamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ornaments to fetch.
     */
    orderBy?: ornamentOrderByWithRelationInput | ornamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ornaments.
     */
    cursor?: ornamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ornaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ornaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ornaments.
     */
    distinct?: OrnamentScalarFieldEnum | OrnamentScalarFieldEnum[]
  }

  /**
   * ornament findFirstOrThrow
   */
  export type ornamentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ornament
     */
    select?: ornamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ornament
     */
    omit?: ornamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ornamentInclude<ExtArgs> | null
    /**
     * Filter, which ornament to fetch.
     */
    where?: ornamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ornaments to fetch.
     */
    orderBy?: ornamentOrderByWithRelationInput | ornamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ornaments.
     */
    cursor?: ornamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ornaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ornaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ornaments.
     */
    distinct?: OrnamentScalarFieldEnum | OrnamentScalarFieldEnum[]
  }

  /**
   * ornament findMany
   */
  export type ornamentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ornament
     */
    select?: ornamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ornament
     */
    omit?: ornamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ornamentInclude<ExtArgs> | null
    /**
     * Filter, which ornaments to fetch.
     */
    where?: ornamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ornaments to fetch.
     */
    orderBy?: ornamentOrderByWithRelationInput | ornamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ornaments.
     */
    cursor?: ornamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ornaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ornaments.
     */
    skip?: number
    distinct?: OrnamentScalarFieldEnum | OrnamentScalarFieldEnum[]
  }

  /**
   * ornament create
   */
  export type ornamentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ornament
     */
    select?: ornamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ornament
     */
    omit?: ornamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ornamentInclude<ExtArgs> | null
    /**
     * The data needed to create a ornament.
     */
    data: XOR<ornamentCreateInput, ornamentUncheckedCreateInput>
  }

  /**
   * ornament createMany
   */
  export type ornamentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ornaments.
     */
    data: ornamentCreateManyInput | ornamentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ornament update
   */
  export type ornamentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ornament
     */
    select?: ornamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ornament
     */
    omit?: ornamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ornamentInclude<ExtArgs> | null
    /**
     * The data needed to update a ornament.
     */
    data: XOR<ornamentUpdateInput, ornamentUncheckedUpdateInput>
    /**
     * Choose, which ornament to update.
     */
    where: ornamentWhereUniqueInput
  }

  /**
   * ornament updateMany
   */
  export type ornamentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ornaments.
     */
    data: XOR<ornamentUpdateManyMutationInput, ornamentUncheckedUpdateManyInput>
    /**
     * Filter which ornaments to update
     */
    where?: ornamentWhereInput
    /**
     * Limit how many ornaments to update.
     */
    limit?: number
  }

  /**
   * ornament upsert
   */
  export type ornamentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ornament
     */
    select?: ornamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ornament
     */
    omit?: ornamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ornamentInclude<ExtArgs> | null
    /**
     * The filter to search for the ornament to update in case it exists.
     */
    where: ornamentWhereUniqueInput
    /**
     * In case the ornament found by the `where` argument doesn't exist, create a new ornament with this data.
     */
    create: XOR<ornamentCreateInput, ornamentUncheckedCreateInput>
    /**
     * In case the ornament was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ornamentUpdateInput, ornamentUncheckedUpdateInput>
  }

  /**
   * ornament delete
   */
  export type ornamentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ornament
     */
    select?: ornamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ornament
     */
    omit?: ornamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ornamentInclude<ExtArgs> | null
    /**
     * Filter which ornament to delete.
     */
    where: ornamentWhereUniqueInput
  }

  /**
   * ornament deleteMany
   */
  export type ornamentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ornaments to delete
     */
    where?: ornamentWhereInput
    /**
     * Limit how many ornaments to delete.
     */
    limit?: number
  }

  /**
   * ornament.billitem
   */
  export type ornament$billitemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the billitem
     */
    select?: billitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the billitem
     */
    omit?: billitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: billitemInclude<ExtArgs> | null
    where?: billitemWhereInput
    orderBy?: billitemOrderByWithRelationInput | billitemOrderByWithRelationInput[]
    cursor?: billitemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BillitemScalarFieldEnum | BillitemScalarFieldEnum[]
  }

  /**
   * ornament without action
   */
  export type ornamentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ornament
     */
    select?: ornamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ornament
     */
    omit?: ornamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ornamentInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BillScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    totalAmount: 'totalAmount',
    createdAt: 'createdAt'
  };

  export type BillScalarFieldEnum = (typeof BillScalarFieldEnum)[keyof typeof BillScalarFieldEnum]


  export const BillitemScalarFieldEnum: {
    id: 'id',
    billId: 'billId',
    ornamentId: 'ornamentId',
    sellingPrice: 'sellingPrice'
  };

  export type BillitemScalarFieldEnum = (typeof BillitemScalarFieldEnum)[keyof typeof BillitemScalarFieldEnum]


  export const ClientScalarFieldEnum: {
    id: 'id',
    name: 'name',
    phone: 'phone',
    email: 'email'
  };

  export type ClientScalarFieldEnum = (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum]


  export const MerchantScalarFieldEnum: {
    merchantCode: 'merchantCode',
    name: 'name',
    phone: 'phone'
  };

  export type MerchantScalarFieldEnum = (typeof MerchantScalarFieldEnum)[keyof typeof MerchantScalarFieldEnum]


  export const OrnamentScalarFieldEnum: {
    id: 'id',
    ornamentId: 'ornamentId',
    type: 'type',
    merchantCode: 'merchantCode',
    weight: 'weight',
    costPrice: 'costPrice',
    purity: 'purity',
    qrCode: 'qrCode',
    isSold: 'isSold',
    createdAt: 'createdAt'
  };

  export type OrnamentScalarFieldEnum = (typeof OrnamentScalarFieldEnum)[keyof typeof OrnamentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const billitemOrderByRelevanceFieldEnum: {
    ornamentId: 'ornamentId'
  };

  export type billitemOrderByRelevanceFieldEnum = (typeof billitemOrderByRelevanceFieldEnum)[keyof typeof billitemOrderByRelevanceFieldEnum]


  export const clientOrderByRelevanceFieldEnum: {
    name: 'name',
    phone: 'phone',
    email: 'email'
  };

  export type clientOrderByRelevanceFieldEnum = (typeof clientOrderByRelevanceFieldEnum)[keyof typeof clientOrderByRelevanceFieldEnum]


  export const merchantOrderByRelevanceFieldEnum: {
    merchantCode: 'merchantCode',
    name: 'name',
    phone: 'phone'
  };

  export type merchantOrderByRelevanceFieldEnum = (typeof merchantOrderByRelevanceFieldEnum)[keyof typeof merchantOrderByRelevanceFieldEnum]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const ornamentOrderByRelevanceFieldEnum: {
    ornamentId: 'ornamentId',
    type: 'type',
    merchantCode: 'merchantCode',
    purity: 'purity',
    qrCode: 'qrCode'
  };

  export type ornamentOrderByRelevanceFieldEnum = (typeof ornamentOrderByRelevanceFieldEnum)[keyof typeof ornamentOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type billWhereInput = {
    AND?: billWhereInput | billWhereInput[]
    OR?: billWhereInput[]
    NOT?: billWhereInput | billWhereInput[]
    id?: IntFilter<"bill"> | number
    clientId?: IntFilter<"bill"> | number
    totalAmount?: FloatFilter<"bill"> | number
    createdAt?: DateTimeFilter<"bill"> | Date | string
    client?: XOR<ClientScalarRelationFilter, clientWhereInput>
    billitem?: BillitemListRelationFilter
  }

  export type billOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    totalAmount?: SortOrder
    createdAt?: SortOrder
    client?: clientOrderByWithRelationInput
    billitem?: billitemOrderByRelationAggregateInput
  }

  export type billWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: billWhereInput | billWhereInput[]
    OR?: billWhereInput[]
    NOT?: billWhereInput | billWhereInput[]
    clientId?: IntFilter<"bill"> | number
    totalAmount?: FloatFilter<"bill"> | number
    createdAt?: DateTimeFilter<"bill"> | Date | string
    client?: XOR<ClientScalarRelationFilter, clientWhereInput>
    billitem?: BillitemListRelationFilter
  }, "id">

  export type billOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    totalAmount?: SortOrder
    createdAt?: SortOrder
    _count?: billCountOrderByAggregateInput
    _avg?: billAvgOrderByAggregateInput
    _max?: billMaxOrderByAggregateInput
    _min?: billMinOrderByAggregateInput
    _sum?: billSumOrderByAggregateInput
  }

  export type billScalarWhereWithAggregatesInput = {
    AND?: billScalarWhereWithAggregatesInput | billScalarWhereWithAggregatesInput[]
    OR?: billScalarWhereWithAggregatesInput[]
    NOT?: billScalarWhereWithAggregatesInput | billScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"bill"> | number
    clientId?: IntWithAggregatesFilter<"bill"> | number
    totalAmount?: FloatWithAggregatesFilter<"bill"> | number
    createdAt?: DateTimeWithAggregatesFilter<"bill"> | Date | string
  }

  export type billitemWhereInput = {
    AND?: billitemWhereInput | billitemWhereInput[]
    OR?: billitemWhereInput[]
    NOT?: billitemWhereInput | billitemWhereInput[]
    id?: IntFilter<"billitem"> | number
    billId?: IntFilter<"billitem"> | number
    ornamentId?: StringFilter<"billitem"> | string
    sellingPrice?: FloatFilter<"billitem"> | number
    bill?: XOR<BillScalarRelationFilter, billWhereInput>
    ornament?: XOR<OrnamentScalarRelationFilter, ornamentWhereInput>
  }

  export type billitemOrderByWithRelationInput = {
    id?: SortOrder
    billId?: SortOrder
    ornamentId?: SortOrder
    sellingPrice?: SortOrder
    bill?: billOrderByWithRelationInput
    ornament?: ornamentOrderByWithRelationInput
    _relevance?: billitemOrderByRelevanceInput
  }

  export type billitemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: billitemWhereInput | billitemWhereInput[]
    OR?: billitemWhereInput[]
    NOT?: billitemWhereInput | billitemWhereInput[]
    billId?: IntFilter<"billitem"> | number
    ornamentId?: StringFilter<"billitem"> | string
    sellingPrice?: FloatFilter<"billitem"> | number
    bill?: XOR<BillScalarRelationFilter, billWhereInput>
    ornament?: XOR<OrnamentScalarRelationFilter, ornamentWhereInput>
  }, "id">

  export type billitemOrderByWithAggregationInput = {
    id?: SortOrder
    billId?: SortOrder
    ornamentId?: SortOrder
    sellingPrice?: SortOrder
    _count?: billitemCountOrderByAggregateInput
    _avg?: billitemAvgOrderByAggregateInput
    _max?: billitemMaxOrderByAggregateInput
    _min?: billitemMinOrderByAggregateInput
    _sum?: billitemSumOrderByAggregateInput
  }

  export type billitemScalarWhereWithAggregatesInput = {
    AND?: billitemScalarWhereWithAggregatesInput | billitemScalarWhereWithAggregatesInput[]
    OR?: billitemScalarWhereWithAggregatesInput[]
    NOT?: billitemScalarWhereWithAggregatesInput | billitemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"billitem"> | number
    billId?: IntWithAggregatesFilter<"billitem"> | number
    ornamentId?: StringWithAggregatesFilter<"billitem"> | string
    sellingPrice?: FloatWithAggregatesFilter<"billitem"> | number
  }

  export type clientWhereInput = {
    AND?: clientWhereInput | clientWhereInput[]
    OR?: clientWhereInput[]
    NOT?: clientWhereInput | clientWhereInput[]
    id?: IntFilter<"client"> | number
    name?: StringFilter<"client"> | string
    phone?: StringFilter<"client"> | string
    email?: StringFilter<"client"> | string
    bill?: BillListRelationFilter
  }

  export type clientOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    bill?: billOrderByRelationAggregateInput
    _relevance?: clientOrderByRelevanceInput
  }

  export type clientWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    phone?: string
    AND?: clientWhereInput | clientWhereInput[]
    OR?: clientWhereInput[]
    NOT?: clientWhereInput | clientWhereInput[]
    name?: StringFilter<"client"> | string
    email?: StringFilter<"client"> | string
    bill?: BillListRelationFilter
  }, "id" | "phone">

  export type clientOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    _count?: clientCountOrderByAggregateInput
    _avg?: clientAvgOrderByAggregateInput
    _max?: clientMaxOrderByAggregateInput
    _min?: clientMinOrderByAggregateInput
    _sum?: clientSumOrderByAggregateInput
  }

  export type clientScalarWhereWithAggregatesInput = {
    AND?: clientScalarWhereWithAggregatesInput | clientScalarWhereWithAggregatesInput[]
    OR?: clientScalarWhereWithAggregatesInput[]
    NOT?: clientScalarWhereWithAggregatesInput | clientScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"client"> | number
    name?: StringWithAggregatesFilter<"client"> | string
    phone?: StringWithAggregatesFilter<"client"> | string
    email?: StringWithAggregatesFilter<"client"> | string
  }

  export type merchantWhereInput = {
    AND?: merchantWhereInput | merchantWhereInput[]
    OR?: merchantWhereInput[]
    NOT?: merchantWhereInput | merchantWhereInput[]
    merchantCode?: StringFilter<"merchant"> | string
    name?: StringFilter<"merchant"> | string
    phone?: StringFilter<"merchant"> | string
    ornament?: OrnamentListRelationFilter
  }

  export type merchantOrderByWithRelationInput = {
    merchantCode?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    ornament?: ornamentOrderByRelationAggregateInput
    _relevance?: merchantOrderByRelevanceInput
  }

  export type merchantWhereUniqueInput = Prisma.AtLeast<{
    merchantCode?: string
    phone?: string
    AND?: merchantWhereInput | merchantWhereInput[]
    OR?: merchantWhereInput[]
    NOT?: merchantWhereInput | merchantWhereInput[]
    name?: StringFilter<"merchant"> | string
    ornament?: OrnamentListRelationFilter
  }, "merchantCode" | "phone">

  export type merchantOrderByWithAggregationInput = {
    merchantCode?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    _count?: merchantCountOrderByAggregateInput
    _max?: merchantMaxOrderByAggregateInput
    _min?: merchantMinOrderByAggregateInput
  }

  export type merchantScalarWhereWithAggregatesInput = {
    AND?: merchantScalarWhereWithAggregatesInput | merchantScalarWhereWithAggregatesInput[]
    OR?: merchantScalarWhereWithAggregatesInput[]
    NOT?: merchantScalarWhereWithAggregatesInput | merchantScalarWhereWithAggregatesInput[]
    merchantCode?: StringWithAggregatesFilter<"merchant"> | string
    name?: StringWithAggregatesFilter<"merchant"> | string
    phone?: StringWithAggregatesFilter<"merchant"> | string
  }

  export type ornamentWhereInput = {
    AND?: ornamentWhereInput | ornamentWhereInput[]
    OR?: ornamentWhereInput[]
    NOT?: ornamentWhereInput | ornamentWhereInput[]
    id?: IntFilter<"ornament"> | number
    ornamentId?: StringFilter<"ornament"> | string
    type?: StringFilter<"ornament"> | string
    merchantCode?: StringFilter<"ornament"> | string
    weight?: FloatFilter<"ornament"> | number
    costPrice?: FloatFilter<"ornament"> | number
    purity?: StringFilter<"ornament"> | string
    qrCode?: StringNullableFilter<"ornament"> | string | null
    isSold?: BoolFilter<"ornament"> | boolean
    createdAt?: DateTimeFilter<"ornament"> | Date | string
    billitem?: BillitemListRelationFilter
    merchant?: XOR<MerchantScalarRelationFilter, merchantWhereInput>
  }

  export type ornamentOrderByWithRelationInput = {
    id?: SortOrder
    ornamentId?: SortOrder
    type?: SortOrder
    merchantCode?: SortOrder
    weight?: SortOrder
    costPrice?: SortOrder
    purity?: SortOrder
    qrCode?: SortOrderInput | SortOrder
    isSold?: SortOrder
    createdAt?: SortOrder
    billitem?: billitemOrderByRelationAggregateInput
    merchant?: merchantOrderByWithRelationInput
    _relevance?: ornamentOrderByRelevanceInput
  }

  export type ornamentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    ornamentId?: string
    AND?: ornamentWhereInput | ornamentWhereInput[]
    OR?: ornamentWhereInput[]
    NOT?: ornamentWhereInput | ornamentWhereInput[]
    type?: StringFilter<"ornament"> | string
    merchantCode?: StringFilter<"ornament"> | string
    weight?: FloatFilter<"ornament"> | number
    costPrice?: FloatFilter<"ornament"> | number
    purity?: StringFilter<"ornament"> | string
    qrCode?: StringNullableFilter<"ornament"> | string | null
    isSold?: BoolFilter<"ornament"> | boolean
    createdAt?: DateTimeFilter<"ornament"> | Date | string
    billitem?: BillitemListRelationFilter
    merchant?: XOR<MerchantScalarRelationFilter, merchantWhereInput>
  }, "id" | "ornamentId">

  export type ornamentOrderByWithAggregationInput = {
    id?: SortOrder
    ornamentId?: SortOrder
    type?: SortOrder
    merchantCode?: SortOrder
    weight?: SortOrder
    costPrice?: SortOrder
    purity?: SortOrder
    qrCode?: SortOrderInput | SortOrder
    isSold?: SortOrder
    createdAt?: SortOrder
    _count?: ornamentCountOrderByAggregateInput
    _avg?: ornamentAvgOrderByAggregateInput
    _max?: ornamentMaxOrderByAggregateInput
    _min?: ornamentMinOrderByAggregateInput
    _sum?: ornamentSumOrderByAggregateInput
  }

  export type ornamentScalarWhereWithAggregatesInput = {
    AND?: ornamentScalarWhereWithAggregatesInput | ornamentScalarWhereWithAggregatesInput[]
    OR?: ornamentScalarWhereWithAggregatesInput[]
    NOT?: ornamentScalarWhereWithAggregatesInput | ornamentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ornament"> | number
    ornamentId?: StringWithAggregatesFilter<"ornament"> | string
    type?: StringWithAggregatesFilter<"ornament"> | string
    merchantCode?: StringWithAggregatesFilter<"ornament"> | string
    weight?: FloatWithAggregatesFilter<"ornament"> | number
    costPrice?: FloatWithAggregatesFilter<"ornament"> | number
    purity?: StringWithAggregatesFilter<"ornament"> | string
    qrCode?: StringNullableWithAggregatesFilter<"ornament"> | string | null
    isSold?: BoolWithAggregatesFilter<"ornament"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ornament"> | Date | string
  }

  export type billCreateInput = {
    totalAmount: number
    createdAt?: Date | string
    client: clientCreateNestedOneWithoutBillInput
    billitem?: billitemCreateNestedManyWithoutBillInput
  }

  export type billUncheckedCreateInput = {
    id?: number
    clientId: number
    totalAmount: number
    createdAt?: Date | string
    billitem?: billitemUncheckedCreateNestedManyWithoutBillInput
  }

  export type billUpdateInput = {
    totalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: clientUpdateOneRequiredWithoutBillNestedInput
    billitem?: billitemUpdateManyWithoutBillNestedInput
  }

  export type billUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billitem?: billitemUncheckedUpdateManyWithoutBillNestedInput
  }

  export type billCreateManyInput = {
    id?: number
    clientId: number
    totalAmount: number
    createdAt?: Date | string
  }

  export type billUpdateManyMutationInput = {
    totalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type billUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type billitemCreateInput = {
    sellingPrice: number
    bill: billCreateNestedOneWithoutBillitemInput
    ornament: ornamentCreateNestedOneWithoutBillitemInput
  }

  export type billitemUncheckedCreateInput = {
    id?: number
    billId: number
    ornamentId: string
    sellingPrice: number
  }

  export type billitemUpdateInput = {
    sellingPrice?: FloatFieldUpdateOperationsInput | number
    bill?: billUpdateOneRequiredWithoutBillitemNestedInput
    ornament?: ornamentUpdateOneRequiredWithoutBillitemNestedInput
  }

  export type billitemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    billId?: IntFieldUpdateOperationsInput | number
    ornamentId?: StringFieldUpdateOperationsInput | string
    sellingPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type billitemCreateManyInput = {
    id?: number
    billId: number
    ornamentId: string
    sellingPrice: number
  }

  export type billitemUpdateManyMutationInput = {
    sellingPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type billitemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    billId?: IntFieldUpdateOperationsInput | number
    ornamentId?: StringFieldUpdateOperationsInput | string
    sellingPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type clientCreateInput = {
    name: string
    phone: string
    email: string
    bill?: billCreateNestedManyWithoutClientInput
  }

  export type clientUncheckedCreateInput = {
    id?: number
    name: string
    phone: string
    email: string
    bill?: billUncheckedCreateNestedManyWithoutClientInput
  }

  export type clientUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bill?: billUpdateManyWithoutClientNestedInput
  }

  export type clientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bill?: billUncheckedUpdateManyWithoutClientNestedInput
  }

  export type clientCreateManyInput = {
    id?: number
    name: string
    phone: string
    email: string
  }

  export type clientUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type clientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type merchantCreateInput = {
    merchantCode: string
    name: string
    phone: string
    ornament?: ornamentCreateNestedManyWithoutMerchantInput
  }

  export type merchantUncheckedCreateInput = {
    merchantCode: string
    name: string
    phone: string
    ornament?: ornamentUncheckedCreateNestedManyWithoutMerchantInput
  }

  export type merchantUpdateInput = {
    merchantCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    ornament?: ornamentUpdateManyWithoutMerchantNestedInput
  }

  export type merchantUncheckedUpdateInput = {
    merchantCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    ornament?: ornamentUncheckedUpdateManyWithoutMerchantNestedInput
  }

  export type merchantCreateManyInput = {
    merchantCode: string
    name: string
    phone: string
  }

  export type merchantUpdateManyMutationInput = {
    merchantCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type merchantUncheckedUpdateManyInput = {
    merchantCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type ornamentCreateInput = {
    ornamentId: string
    type: string
    weight: number
    costPrice: number
    purity: string
    qrCode?: string | null
    isSold?: boolean
    createdAt?: Date | string
    billitem?: billitemCreateNestedManyWithoutOrnamentInput
    merchant: merchantCreateNestedOneWithoutOrnamentInput
  }

  export type ornamentUncheckedCreateInput = {
    id?: number
    ornamentId: string
    type: string
    merchantCode: string
    weight: number
    costPrice: number
    purity: string
    qrCode?: string | null
    isSold?: boolean
    createdAt?: Date | string
    billitem?: billitemUncheckedCreateNestedManyWithoutOrnamentInput
  }

  export type ornamentUpdateInput = {
    ornamentId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    costPrice?: FloatFieldUpdateOperationsInput | number
    purity?: StringFieldUpdateOperationsInput | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    isSold?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billitem?: billitemUpdateManyWithoutOrnamentNestedInput
    merchant?: merchantUpdateOneRequiredWithoutOrnamentNestedInput
  }

  export type ornamentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ornamentId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    merchantCode?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    costPrice?: FloatFieldUpdateOperationsInput | number
    purity?: StringFieldUpdateOperationsInput | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    isSold?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billitem?: billitemUncheckedUpdateManyWithoutOrnamentNestedInput
  }

  export type ornamentCreateManyInput = {
    id?: number
    ornamentId: string
    type: string
    merchantCode: string
    weight: number
    costPrice: number
    purity: string
    qrCode?: string | null
    isSold?: boolean
    createdAt?: Date | string
  }

  export type ornamentUpdateManyMutationInput = {
    ornamentId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    costPrice?: FloatFieldUpdateOperationsInput | number
    purity?: StringFieldUpdateOperationsInput | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    isSold?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ornamentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ornamentId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    merchantCode?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    costPrice?: FloatFieldUpdateOperationsInput | number
    purity?: StringFieldUpdateOperationsInput | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    isSold?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ClientScalarRelationFilter = {
    is?: clientWhereInput
    isNot?: clientWhereInput
  }

  export type BillitemListRelationFilter = {
    every?: billitemWhereInput
    some?: billitemWhereInput
    none?: billitemWhereInput
  }

  export type billitemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type billCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    totalAmount?: SortOrder
    createdAt?: SortOrder
  }

  export type billAvgOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    totalAmount?: SortOrder
  }

  export type billMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    totalAmount?: SortOrder
    createdAt?: SortOrder
  }

  export type billMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    totalAmount?: SortOrder
    createdAt?: SortOrder
  }

  export type billSumOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    totalAmount?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BillScalarRelationFilter = {
    is?: billWhereInput
    isNot?: billWhereInput
  }

  export type OrnamentScalarRelationFilter = {
    is?: ornamentWhereInput
    isNot?: ornamentWhereInput
  }

  export type billitemOrderByRelevanceInput = {
    fields: billitemOrderByRelevanceFieldEnum | billitemOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type billitemCountOrderByAggregateInput = {
    id?: SortOrder
    billId?: SortOrder
    ornamentId?: SortOrder
    sellingPrice?: SortOrder
  }

  export type billitemAvgOrderByAggregateInput = {
    id?: SortOrder
    billId?: SortOrder
    sellingPrice?: SortOrder
  }

  export type billitemMaxOrderByAggregateInput = {
    id?: SortOrder
    billId?: SortOrder
    ornamentId?: SortOrder
    sellingPrice?: SortOrder
  }

  export type billitemMinOrderByAggregateInput = {
    id?: SortOrder
    billId?: SortOrder
    ornamentId?: SortOrder
    sellingPrice?: SortOrder
  }

  export type billitemSumOrderByAggregateInput = {
    id?: SortOrder
    billId?: SortOrder
    sellingPrice?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BillListRelationFilter = {
    every?: billWhereInput
    some?: billWhereInput
    none?: billWhereInput
  }

  export type billOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type clientOrderByRelevanceInput = {
    fields: clientOrderByRelevanceFieldEnum | clientOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type clientCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
  }

  export type clientAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type clientMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
  }

  export type clientMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
  }

  export type clientSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OrnamentListRelationFilter = {
    every?: ornamentWhereInput
    some?: ornamentWhereInput
    none?: ornamentWhereInput
  }

  export type ornamentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type merchantOrderByRelevanceInput = {
    fields: merchantOrderByRelevanceFieldEnum | merchantOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type merchantCountOrderByAggregateInput = {
    merchantCode?: SortOrder
    name?: SortOrder
    phone?: SortOrder
  }

  export type merchantMaxOrderByAggregateInput = {
    merchantCode?: SortOrder
    name?: SortOrder
    phone?: SortOrder
  }

  export type merchantMinOrderByAggregateInput = {
    merchantCode?: SortOrder
    name?: SortOrder
    phone?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type MerchantScalarRelationFilter = {
    is?: merchantWhereInput
    isNot?: merchantWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ornamentOrderByRelevanceInput = {
    fields: ornamentOrderByRelevanceFieldEnum | ornamentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ornamentCountOrderByAggregateInput = {
    id?: SortOrder
    ornamentId?: SortOrder
    type?: SortOrder
    merchantCode?: SortOrder
    weight?: SortOrder
    costPrice?: SortOrder
    purity?: SortOrder
    qrCode?: SortOrder
    isSold?: SortOrder
    createdAt?: SortOrder
  }

  export type ornamentAvgOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    costPrice?: SortOrder
  }

  export type ornamentMaxOrderByAggregateInput = {
    id?: SortOrder
    ornamentId?: SortOrder
    type?: SortOrder
    merchantCode?: SortOrder
    weight?: SortOrder
    costPrice?: SortOrder
    purity?: SortOrder
    qrCode?: SortOrder
    isSold?: SortOrder
    createdAt?: SortOrder
  }

  export type ornamentMinOrderByAggregateInput = {
    id?: SortOrder
    ornamentId?: SortOrder
    type?: SortOrder
    merchantCode?: SortOrder
    weight?: SortOrder
    costPrice?: SortOrder
    purity?: SortOrder
    qrCode?: SortOrder
    isSold?: SortOrder
    createdAt?: SortOrder
  }

  export type ornamentSumOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    costPrice?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type clientCreateNestedOneWithoutBillInput = {
    create?: XOR<clientCreateWithoutBillInput, clientUncheckedCreateWithoutBillInput>
    connectOrCreate?: clientCreateOrConnectWithoutBillInput
    connect?: clientWhereUniqueInput
  }

  export type billitemCreateNestedManyWithoutBillInput = {
    create?: XOR<billitemCreateWithoutBillInput, billitemUncheckedCreateWithoutBillInput> | billitemCreateWithoutBillInput[] | billitemUncheckedCreateWithoutBillInput[]
    connectOrCreate?: billitemCreateOrConnectWithoutBillInput | billitemCreateOrConnectWithoutBillInput[]
    createMany?: billitemCreateManyBillInputEnvelope
    connect?: billitemWhereUniqueInput | billitemWhereUniqueInput[]
  }

  export type billitemUncheckedCreateNestedManyWithoutBillInput = {
    create?: XOR<billitemCreateWithoutBillInput, billitemUncheckedCreateWithoutBillInput> | billitemCreateWithoutBillInput[] | billitemUncheckedCreateWithoutBillInput[]
    connectOrCreate?: billitemCreateOrConnectWithoutBillInput | billitemCreateOrConnectWithoutBillInput[]
    createMany?: billitemCreateManyBillInputEnvelope
    connect?: billitemWhereUniqueInput | billitemWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type clientUpdateOneRequiredWithoutBillNestedInput = {
    create?: XOR<clientCreateWithoutBillInput, clientUncheckedCreateWithoutBillInput>
    connectOrCreate?: clientCreateOrConnectWithoutBillInput
    upsert?: clientUpsertWithoutBillInput
    connect?: clientWhereUniqueInput
    update?: XOR<XOR<clientUpdateToOneWithWhereWithoutBillInput, clientUpdateWithoutBillInput>, clientUncheckedUpdateWithoutBillInput>
  }

  export type billitemUpdateManyWithoutBillNestedInput = {
    create?: XOR<billitemCreateWithoutBillInput, billitemUncheckedCreateWithoutBillInput> | billitemCreateWithoutBillInput[] | billitemUncheckedCreateWithoutBillInput[]
    connectOrCreate?: billitemCreateOrConnectWithoutBillInput | billitemCreateOrConnectWithoutBillInput[]
    upsert?: billitemUpsertWithWhereUniqueWithoutBillInput | billitemUpsertWithWhereUniqueWithoutBillInput[]
    createMany?: billitemCreateManyBillInputEnvelope
    set?: billitemWhereUniqueInput | billitemWhereUniqueInput[]
    disconnect?: billitemWhereUniqueInput | billitemWhereUniqueInput[]
    delete?: billitemWhereUniqueInput | billitemWhereUniqueInput[]
    connect?: billitemWhereUniqueInput | billitemWhereUniqueInput[]
    update?: billitemUpdateWithWhereUniqueWithoutBillInput | billitemUpdateWithWhereUniqueWithoutBillInput[]
    updateMany?: billitemUpdateManyWithWhereWithoutBillInput | billitemUpdateManyWithWhereWithoutBillInput[]
    deleteMany?: billitemScalarWhereInput | billitemScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type billitemUncheckedUpdateManyWithoutBillNestedInput = {
    create?: XOR<billitemCreateWithoutBillInput, billitemUncheckedCreateWithoutBillInput> | billitemCreateWithoutBillInput[] | billitemUncheckedCreateWithoutBillInput[]
    connectOrCreate?: billitemCreateOrConnectWithoutBillInput | billitemCreateOrConnectWithoutBillInput[]
    upsert?: billitemUpsertWithWhereUniqueWithoutBillInput | billitemUpsertWithWhereUniqueWithoutBillInput[]
    createMany?: billitemCreateManyBillInputEnvelope
    set?: billitemWhereUniqueInput | billitemWhereUniqueInput[]
    disconnect?: billitemWhereUniqueInput | billitemWhereUniqueInput[]
    delete?: billitemWhereUniqueInput | billitemWhereUniqueInput[]
    connect?: billitemWhereUniqueInput | billitemWhereUniqueInput[]
    update?: billitemUpdateWithWhereUniqueWithoutBillInput | billitemUpdateWithWhereUniqueWithoutBillInput[]
    updateMany?: billitemUpdateManyWithWhereWithoutBillInput | billitemUpdateManyWithWhereWithoutBillInput[]
    deleteMany?: billitemScalarWhereInput | billitemScalarWhereInput[]
  }

  export type billCreateNestedOneWithoutBillitemInput = {
    create?: XOR<billCreateWithoutBillitemInput, billUncheckedCreateWithoutBillitemInput>
    connectOrCreate?: billCreateOrConnectWithoutBillitemInput
    connect?: billWhereUniqueInput
  }

  export type ornamentCreateNestedOneWithoutBillitemInput = {
    create?: XOR<ornamentCreateWithoutBillitemInput, ornamentUncheckedCreateWithoutBillitemInput>
    connectOrCreate?: ornamentCreateOrConnectWithoutBillitemInput
    connect?: ornamentWhereUniqueInput
  }

  export type billUpdateOneRequiredWithoutBillitemNestedInput = {
    create?: XOR<billCreateWithoutBillitemInput, billUncheckedCreateWithoutBillitemInput>
    connectOrCreate?: billCreateOrConnectWithoutBillitemInput
    upsert?: billUpsertWithoutBillitemInput
    connect?: billWhereUniqueInput
    update?: XOR<XOR<billUpdateToOneWithWhereWithoutBillitemInput, billUpdateWithoutBillitemInput>, billUncheckedUpdateWithoutBillitemInput>
  }

  export type ornamentUpdateOneRequiredWithoutBillitemNestedInput = {
    create?: XOR<ornamentCreateWithoutBillitemInput, ornamentUncheckedCreateWithoutBillitemInput>
    connectOrCreate?: ornamentCreateOrConnectWithoutBillitemInput
    upsert?: ornamentUpsertWithoutBillitemInput
    connect?: ornamentWhereUniqueInput
    update?: XOR<XOR<ornamentUpdateToOneWithWhereWithoutBillitemInput, ornamentUpdateWithoutBillitemInput>, ornamentUncheckedUpdateWithoutBillitemInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type billCreateNestedManyWithoutClientInput = {
    create?: XOR<billCreateWithoutClientInput, billUncheckedCreateWithoutClientInput> | billCreateWithoutClientInput[] | billUncheckedCreateWithoutClientInput[]
    connectOrCreate?: billCreateOrConnectWithoutClientInput | billCreateOrConnectWithoutClientInput[]
    createMany?: billCreateManyClientInputEnvelope
    connect?: billWhereUniqueInput | billWhereUniqueInput[]
  }

  export type billUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<billCreateWithoutClientInput, billUncheckedCreateWithoutClientInput> | billCreateWithoutClientInput[] | billUncheckedCreateWithoutClientInput[]
    connectOrCreate?: billCreateOrConnectWithoutClientInput | billCreateOrConnectWithoutClientInput[]
    createMany?: billCreateManyClientInputEnvelope
    connect?: billWhereUniqueInput | billWhereUniqueInput[]
  }

  export type billUpdateManyWithoutClientNestedInput = {
    create?: XOR<billCreateWithoutClientInput, billUncheckedCreateWithoutClientInput> | billCreateWithoutClientInput[] | billUncheckedCreateWithoutClientInput[]
    connectOrCreate?: billCreateOrConnectWithoutClientInput | billCreateOrConnectWithoutClientInput[]
    upsert?: billUpsertWithWhereUniqueWithoutClientInput | billUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: billCreateManyClientInputEnvelope
    set?: billWhereUniqueInput | billWhereUniqueInput[]
    disconnect?: billWhereUniqueInput | billWhereUniqueInput[]
    delete?: billWhereUniqueInput | billWhereUniqueInput[]
    connect?: billWhereUniqueInput | billWhereUniqueInput[]
    update?: billUpdateWithWhereUniqueWithoutClientInput | billUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: billUpdateManyWithWhereWithoutClientInput | billUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: billScalarWhereInput | billScalarWhereInput[]
  }

  export type billUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<billCreateWithoutClientInput, billUncheckedCreateWithoutClientInput> | billCreateWithoutClientInput[] | billUncheckedCreateWithoutClientInput[]
    connectOrCreate?: billCreateOrConnectWithoutClientInput | billCreateOrConnectWithoutClientInput[]
    upsert?: billUpsertWithWhereUniqueWithoutClientInput | billUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: billCreateManyClientInputEnvelope
    set?: billWhereUniqueInput | billWhereUniqueInput[]
    disconnect?: billWhereUniqueInput | billWhereUniqueInput[]
    delete?: billWhereUniqueInput | billWhereUniqueInput[]
    connect?: billWhereUniqueInput | billWhereUniqueInput[]
    update?: billUpdateWithWhereUniqueWithoutClientInput | billUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: billUpdateManyWithWhereWithoutClientInput | billUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: billScalarWhereInput | billScalarWhereInput[]
  }

  export type ornamentCreateNestedManyWithoutMerchantInput = {
    create?: XOR<ornamentCreateWithoutMerchantInput, ornamentUncheckedCreateWithoutMerchantInput> | ornamentCreateWithoutMerchantInput[] | ornamentUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: ornamentCreateOrConnectWithoutMerchantInput | ornamentCreateOrConnectWithoutMerchantInput[]
    createMany?: ornamentCreateManyMerchantInputEnvelope
    connect?: ornamentWhereUniqueInput | ornamentWhereUniqueInput[]
  }

  export type ornamentUncheckedCreateNestedManyWithoutMerchantInput = {
    create?: XOR<ornamentCreateWithoutMerchantInput, ornamentUncheckedCreateWithoutMerchantInput> | ornamentCreateWithoutMerchantInput[] | ornamentUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: ornamentCreateOrConnectWithoutMerchantInput | ornamentCreateOrConnectWithoutMerchantInput[]
    createMany?: ornamentCreateManyMerchantInputEnvelope
    connect?: ornamentWhereUniqueInput | ornamentWhereUniqueInput[]
  }

  export type ornamentUpdateManyWithoutMerchantNestedInput = {
    create?: XOR<ornamentCreateWithoutMerchantInput, ornamentUncheckedCreateWithoutMerchantInput> | ornamentCreateWithoutMerchantInput[] | ornamentUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: ornamentCreateOrConnectWithoutMerchantInput | ornamentCreateOrConnectWithoutMerchantInput[]
    upsert?: ornamentUpsertWithWhereUniqueWithoutMerchantInput | ornamentUpsertWithWhereUniqueWithoutMerchantInput[]
    createMany?: ornamentCreateManyMerchantInputEnvelope
    set?: ornamentWhereUniqueInput | ornamentWhereUniqueInput[]
    disconnect?: ornamentWhereUniqueInput | ornamentWhereUniqueInput[]
    delete?: ornamentWhereUniqueInput | ornamentWhereUniqueInput[]
    connect?: ornamentWhereUniqueInput | ornamentWhereUniqueInput[]
    update?: ornamentUpdateWithWhereUniqueWithoutMerchantInput | ornamentUpdateWithWhereUniqueWithoutMerchantInput[]
    updateMany?: ornamentUpdateManyWithWhereWithoutMerchantInput | ornamentUpdateManyWithWhereWithoutMerchantInput[]
    deleteMany?: ornamentScalarWhereInput | ornamentScalarWhereInput[]
  }

  export type ornamentUncheckedUpdateManyWithoutMerchantNestedInput = {
    create?: XOR<ornamentCreateWithoutMerchantInput, ornamentUncheckedCreateWithoutMerchantInput> | ornamentCreateWithoutMerchantInput[] | ornamentUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: ornamentCreateOrConnectWithoutMerchantInput | ornamentCreateOrConnectWithoutMerchantInput[]
    upsert?: ornamentUpsertWithWhereUniqueWithoutMerchantInput | ornamentUpsertWithWhereUniqueWithoutMerchantInput[]
    createMany?: ornamentCreateManyMerchantInputEnvelope
    set?: ornamentWhereUniqueInput | ornamentWhereUniqueInput[]
    disconnect?: ornamentWhereUniqueInput | ornamentWhereUniqueInput[]
    delete?: ornamentWhereUniqueInput | ornamentWhereUniqueInput[]
    connect?: ornamentWhereUniqueInput | ornamentWhereUniqueInput[]
    update?: ornamentUpdateWithWhereUniqueWithoutMerchantInput | ornamentUpdateWithWhereUniqueWithoutMerchantInput[]
    updateMany?: ornamentUpdateManyWithWhereWithoutMerchantInput | ornamentUpdateManyWithWhereWithoutMerchantInput[]
    deleteMany?: ornamentScalarWhereInput | ornamentScalarWhereInput[]
  }

  export type billitemCreateNestedManyWithoutOrnamentInput = {
    create?: XOR<billitemCreateWithoutOrnamentInput, billitemUncheckedCreateWithoutOrnamentInput> | billitemCreateWithoutOrnamentInput[] | billitemUncheckedCreateWithoutOrnamentInput[]
    connectOrCreate?: billitemCreateOrConnectWithoutOrnamentInput | billitemCreateOrConnectWithoutOrnamentInput[]
    createMany?: billitemCreateManyOrnamentInputEnvelope
    connect?: billitemWhereUniqueInput | billitemWhereUniqueInput[]
  }

  export type merchantCreateNestedOneWithoutOrnamentInput = {
    create?: XOR<merchantCreateWithoutOrnamentInput, merchantUncheckedCreateWithoutOrnamentInput>
    connectOrCreate?: merchantCreateOrConnectWithoutOrnamentInput
    connect?: merchantWhereUniqueInput
  }

  export type billitemUncheckedCreateNestedManyWithoutOrnamentInput = {
    create?: XOR<billitemCreateWithoutOrnamentInput, billitemUncheckedCreateWithoutOrnamentInput> | billitemCreateWithoutOrnamentInput[] | billitemUncheckedCreateWithoutOrnamentInput[]
    connectOrCreate?: billitemCreateOrConnectWithoutOrnamentInput | billitemCreateOrConnectWithoutOrnamentInput[]
    createMany?: billitemCreateManyOrnamentInputEnvelope
    connect?: billitemWhereUniqueInput | billitemWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type billitemUpdateManyWithoutOrnamentNestedInput = {
    create?: XOR<billitemCreateWithoutOrnamentInput, billitemUncheckedCreateWithoutOrnamentInput> | billitemCreateWithoutOrnamentInput[] | billitemUncheckedCreateWithoutOrnamentInput[]
    connectOrCreate?: billitemCreateOrConnectWithoutOrnamentInput | billitemCreateOrConnectWithoutOrnamentInput[]
    upsert?: billitemUpsertWithWhereUniqueWithoutOrnamentInput | billitemUpsertWithWhereUniqueWithoutOrnamentInput[]
    createMany?: billitemCreateManyOrnamentInputEnvelope
    set?: billitemWhereUniqueInput | billitemWhereUniqueInput[]
    disconnect?: billitemWhereUniqueInput | billitemWhereUniqueInput[]
    delete?: billitemWhereUniqueInput | billitemWhereUniqueInput[]
    connect?: billitemWhereUniqueInput | billitemWhereUniqueInput[]
    update?: billitemUpdateWithWhereUniqueWithoutOrnamentInput | billitemUpdateWithWhereUniqueWithoutOrnamentInput[]
    updateMany?: billitemUpdateManyWithWhereWithoutOrnamentInput | billitemUpdateManyWithWhereWithoutOrnamentInput[]
    deleteMany?: billitemScalarWhereInput | billitemScalarWhereInput[]
  }

  export type merchantUpdateOneRequiredWithoutOrnamentNestedInput = {
    create?: XOR<merchantCreateWithoutOrnamentInput, merchantUncheckedCreateWithoutOrnamentInput>
    connectOrCreate?: merchantCreateOrConnectWithoutOrnamentInput
    upsert?: merchantUpsertWithoutOrnamentInput
    connect?: merchantWhereUniqueInput
    update?: XOR<XOR<merchantUpdateToOneWithWhereWithoutOrnamentInput, merchantUpdateWithoutOrnamentInput>, merchantUncheckedUpdateWithoutOrnamentInput>
  }

  export type billitemUncheckedUpdateManyWithoutOrnamentNestedInput = {
    create?: XOR<billitemCreateWithoutOrnamentInput, billitemUncheckedCreateWithoutOrnamentInput> | billitemCreateWithoutOrnamentInput[] | billitemUncheckedCreateWithoutOrnamentInput[]
    connectOrCreate?: billitemCreateOrConnectWithoutOrnamentInput | billitemCreateOrConnectWithoutOrnamentInput[]
    upsert?: billitemUpsertWithWhereUniqueWithoutOrnamentInput | billitemUpsertWithWhereUniqueWithoutOrnamentInput[]
    createMany?: billitemCreateManyOrnamentInputEnvelope
    set?: billitemWhereUniqueInput | billitemWhereUniqueInput[]
    disconnect?: billitemWhereUniqueInput | billitemWhereUniqueInput[]
    delete?: billitemWhereUniqueInput | billitemWhereUniqueInput[]
    connect?: billitemWhereUniqueInput | billitemWhereUniqueInput[]
    update?: billitemUpdateWithWhereUniqueWithoutOrnamentInput | billitemUpdateWithWhereUniqueWithoutOrnamentInput[]
    updateMany?: billitemUpdateManyWithWhereWithoutOrnamentInput | billitemUpdateManyWithWhereWithoutOrnamentInput[]
    deleteMany?: billitemScalarWhereInput | billitemScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type clientCreateWithoutBillInput = {
    name: string
    phone: string
    email: string
  }

  export type clientUncheckedCreateWithoutBillInput = {
    id?: number
    name: string
    phone: string
    email: string
  }

  export type clientCreateOrConnectWithoutBillInput = {
    where: clientWhereUniqueInput
    create: XOR<clientCreateWithoutBillInput, clientUncheckedCreateWithoutBillInput>
  }

  export type billitemCreateWithoutBillInput = {
    sellingPrice: number
    ornament: ornamentCreateNestedOneWithoutBillitemInput
  }

  export type billitemUncheckedCreateWithoutBillInput = {
    id?: number
    ornamentId: string
    sellingPrice: number
  }

  export type billitemCreateOrConnectWithoutBillInput = {
    where: billitemWhereUniqueInput
    create: XOR<billitemCreateWithoutBillInput, billitemUncheckedCreateWithoutBillInput>
  }

  export type billitemCreateManyBillInputEnvelope = {
    data: billitemCreateManyBillInput | billitemCreateManyBillInput[]
    skipDuplicates?: boolean
  }

  export type clientUpsertWithoutBillInput = {
    update: XOR<clientUpdateWithoutBillInput, clientUncheckedUpdateWithoutBillInput>
    create: XOR<clientCreateWithoutBillInput, clientUncheckedCreateWithoutBillInput>
    where?: clientWhereInput
  }

  export type clientUpdateToOneWithWhereWithoutBillInput = {
    where?: clientWhereInput
    data: XOR<clientUpdateWithoutBillInput, clientUncheckedUpdateWithoutBillInput>
  }

  export type clientUpdateWithoutBillInput = {
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type clientUncheckedUpdateWithoutBillInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type billitemUpsertWithWhereUniqueWithoutBillInput = {
    where: billitemWhereUniqueInput
    update: XOR<billitemUpdateWithoutBillInput, billitemUncheckedUpdateWithoutBillInput>
    create: XOR<billitemCreateWithoutBillInput, billitemUncheckedCreateWithoutBillInput>
  }

  export type billitemUpdateWithWhereUniqueWithoutBillInput = {
    where: billitemWhereUniqueInput
    data: XOR<billitemUpdateWithoutBillInput, billitemUncheckedUpdateWithoutBillInput>
  }

  export type billitemUpdateManyWithWhereWithoutBillInput = {
    where: billitemScalarWhereInput
    data: XOR<billitemUpdateManyMutationInput, billitemUncheckedUpdateManyWithoutBillInput>
  }

  export type billitemScalarWhereInput = {
    AND?: billitemScalarWhereInput | billitemScalarWhereInput[]
    OR?: billitemScalarWhereInput[]
    NOT?: billitemScalarWhereInput | billitemScalarWhereInput[]
    id?: IntFilter<"billitem"> | number
    billId?: IntFilter<"billitem"> | number
    ornamentId?: StringFilter<"billitem"> | string
    sellingPrice?: FloatFilter<"billitem"> | number
  }

  export type billCreateWithoutBillitemInput = {
    totalAmount: number
    createdAt?: Date | string
    client: clientCreateNestedOneWithoutBillInput
  }

  export type billUncheckedCreateWithoutBillitemInput = {
    id?: number
    clientId: number
    totalAmount: number
    createdAt?: Date | string
  }

  export type billCreateOrConnectWithoutBillitemInput = {
    where: billWhereUniqueInput
    create: XOR<billCreateWithoutBillitemInput, billUncheckedCreateWithoutBillitemInput>
  }

  export type ornamentCreateWithoutBillitemInput = {
    ornamentId: string
    type: string
    weight: number
    costPrice: number
    purity: string
    qrCode?: string | null
    isSold?: boolean
    createdAt?: Date | string
    merchant: merchantCreateNestedOneWithoutOrnamentInput
  }

  export type ornamentUncheckedCreateWithoutBillitemInput = {
    id?: number
    ornamentId: string
    type: string
    merchantCode: string
    weight: number
    costPrice: number
    purity: string
    qrCode?: string | null
    isSold?: boolean
    createdAt?: Date | string
  }

  export type ornamentCreateOrConnectWithoutBillitemInput = {
    where: ornamentWhereUniqueInput
    create: XOR<ornamentCreateWithoutBillitemInput, ornamentUncheckedCreateWithoutBillitemInput>
  }

  export type billUpsertWithoutBillitemInput = {
    update: XOR<billUpdateWithoutBillitemInput, billUncheckedUpdateWithoutBillitemInput>
    create: XOR<billCreateWithoutBillitemInput, billUncheckedCreateWithoutBillitemInput>
    where?: billWhereInput
  }

  export type billUpdateToOneWithWhereWithoutBillitemInput = {
    where?: billWhereInput
    data: XOR<billUpdateWithoutBillitemInput, billUncheckedUpdateWithoutBillitemInput>
  }

  export type billUpdateWithoutBillitemInput = {
    totalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: clientUpdateOneRequiredWithoutBillNestedInput
  }

  export type billUncheckedUpdateWithoutBillitemInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ornamentUpsertWithoutBillitemInput = {
    update: XOR<ornamentUpdateWithoutBillitemInput, ornamentUncheckedUpdateWithoutBillitemInput>
    create: XOR<ornamentCreateWithoutBillitemInput, ornamentUncheckedCreateWithoutBillitemInput>
    where?: ornamentWhereInput
  }

  export type ornamentUpdateToOneWithWhereWithoutBillitemInput = {
    where?: ornamentWhereInput
    data: XOR<ornamentUpdateWithoutBillitemInput, ornamentUncheckedUpdateWithoutBillitemInput>
  }

  export type ornamentUpdateWithoutBillitemInput = {
    ornamentId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    costPrice?: FloatFieldUpdateOperationsInput | number
    purity?: StringFieldUpdateOperationsInput | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    isSold?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchant?: merchantUpdateOneRequiredWithoutOrnamentNestedInput
  }

  export type ornamentUncheckedUpdateWithoutBillitemInput = {
    id?: IntFieldUpdateOperationsInput | number
    ornamentId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    merchantCode?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    costPrice?: FloatFieldUpdateOperationsInput | number
    purity?: StringFieldUpdateOperationsInput | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    isSold?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type billCreateWithoutClientInput = {
    totalAmount: number
    createdAt?: Date | string
    billitem?: billitemCreateNestedManyWithoutBillInput
  }

  export type billUncheckedCreateWithoutClientInput = {
    id?: number
    totalAmount: number
    createdAt?: Date | string
    billitem?: billitemUncheckedCreateNestedManyWithoutBillInput
  }

  export type billCreateOrConnectWithoutClientInput = {
    where: billWhereUniqueInput
    create: XOR<billCreateWithoutClientInput, billUncheckedCreateWithoutClientInput>
  }

  export type billCreateManyClientInputEnvelope = {
    data: billCreateManyClientInput | billCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type billUpsertWithWhereUniqueWithoutClientInput = {
    where: billWhereUniqueInput
    update: XOR<billUpdateWithoutClientInput, billUncheckedUpdateWithoutClientInput>
    create: XOR<billCreateWithoutClientInput, billUncheckedCreateWithoutClientInput>
  }

  export type billUpdateWithWhereUniqueWithoutClientInput = {
    where: billWhereUniqueInput
    data: XOR<billUpdateWithoutClientInput, billUncheckedUpdateWithoutClientInput>
  }

  export type billUpdateManyWithWhereWithoutClientInput = {
    where: billScalarWhereInput
    data: XOR<billUpdateManyMutationInput, billUncheckedUpdateManyWithoutClientInput>
  }

  export type billScalarWhereInput = {
    AND?: billScalarWhereInput | billScalarWhereInput[]
    OR?: billScalarWhereInput[]
    NOT?: billScalarWhereInput | billScalarWhereInput[]
    id?: IntFilter<"bill"> | number
    clientId?: IntFilter<"bill"> | number
    totalAmount?: FloatFilter<"bill"> | number
    createdAt?: DateTimeFilter<"bill"> | Date | string
  }

  export type ornamentCreateWithoutMerchantInput = {
    ornamentId: string
    type: string
    weight: number
    costPrice: number
    purity: string
    qrCode?: string | null
    isSold?: boolean
    createdAt?: Date | string
    billitem?: billitemCreateNestedManyWithoutOrnamentInput
  }

  export type ornamentUncheckedCreateWithoutMerchantInput = {
    id?: number
    ornamentId: string
    type: string
    weight: number
    costPrice: number
    purity: string
    qrCode?: string | null
    isSold?: boolean
    createdAt?: Date | string
    billitem?: billitemUncheckedCreateNestedManyWithoutOrnamentInput
  }

  export type ornamentCreateOrConnectWithoutMerchantInput = {
    where: ornamentWhereUniqueInput
    create: XOR<ornamentCreateWithoutMerchantInput, ornamentUncheckedCreateWithoutMerchantInput>
  }

  export type ornamentCreateManyMerchantInputEnvelope = {
    data: ornamentCreateManyMerchantInput | ornamentCreateManyMerchantInput[]
    skipDuplicates?: boolean
  }

  export type ornamentUpsertWithWhereUniqueWithoutMerchantInput = {
    where: ornamentWhereUniqueInput
    update: XOR<ornamentUpdateWithoutMerchantInput, ornamentUncheckedUpdateWithoutMerchantInput>
    create: XOR<ornamentCreateWithoutMerchantInput, ornamentUncheckedCreateWithoutMerchantInput>
  }

  export type ornamentUpdateWithWhereUniqueWithoutMerchantInput = {
    where: ornamentWhereUniqueInput
    data: XOR<ornamentUpdateWithoutMerchantInput, ornamentUncheckedUpdateWithoutMerchantInput>
  }

  export type ornamentUpdateManyWithWhereWithoutMerchantInput = {
    where: ornamentScalarWhereInput
    data: XOR<ornamentUpdateManyMutationInput, ornamentUncheckedUpdateManyWithoutMerchantInput>
  }

  export type ornamentScalarWhereInput = {
    AND?: ornamentScalarWhereInput | ornamentScalarWhereInput[]
    OR?: ornamentScalarWhereInput[]
    NOT?: ornamentScalarWhereInput | ornamentScalarWhereInput[]
    id?: IntFilter<"ornament"> | number
    ornamentId?: StringFilter<"ornament"> | string
    type?: StringFilter<"ornament"> | string
    merchantCode?: StringFilter<"ornament"> | string
    weight?: FloatFilter<"ornament"> | number
    costPrice?: FloatFilter<"ornament"> | number
    purity?: StringFilter<"ornament"> | string
    qrCode?: StringNullableFilter<"ornament"> | string | null
    isSold?: BoolFilter<"ornament"> | boolean
    createdAt?: DateTimeFilter<"ornament"> | Date | string
  }

  export type billitemCreateWithoutOrnamentInput = {
    sellingPrice: number
    bill: billCreateNestedOneWithoutBillitemInput
  }

  export type billitemUncheckedCreateWithoutOrnamentInput = {
    id?: number
    billId: number
    sellingPrice: number
  }

  export type billitemCreateOrConnectWithoutOrnamentInput = {
    where: billitemWhereUniqueInput
    create: XOR<billitemCreateWithoutOrnamentInput, billitemUncheckedCreateWithoutOrnamentInput>
  }

  export type billitemCreateManyOrnamentInputEnvelope = {
    data: billitemCreateManyOrnamentInput | billitemCreateManyOrnamentInput[]
    skipDuplicates?: boolean
  }

  export type merchantCreateWithoutOrnamentInput = {
    merchantCode: string
    name: string
    phone: string
  }

  export type merchantUncheckedCreateWithoutOrnamentInput = {
    merchantCode: string
    name: string
    phone: string
  }

  export type merchantCreateOrConnectWithoutOrnamentInput = {
    where: merchantWhereUniqueInput
    create: XOR<merchantCreateWithoutOrnamentInput, merchantUncheckedCreateWithoutOrnamentInput>
  }

  export type billitemUpsertWithWhereUniqueWithoutOrnamentInput = {
    where: billitemWhereUniqueInput
    update: XOR<billitemUpdateWithoutOrnamentInput, billitemUncheckedUpdateWithoutOrnamentInput>
    create: XOR<billitemCreateWithoutOrnamentInput, billitemUncheckedCreateWithoutOrnamentInput>
  }

  export type billitemUpdateWithWhereUniqueWithoutOrnamentInput = {
    where: billitemWhereUniqueInput
    data: XOR<billitemUpdateWithoutOrnamentInput, billitemUncheckedUpdateWithoutOrnamentInput>
  }

  export type billitemUpdateManyWithWhereWithoutOrnamentInput = {
    where: billitemScalarWhereInput
    data: XOR<billitemUpdateManyMutationInput, billitemUncheckedUpdateManyWithoutOrnamentInput>
  }

  export type merchantUpsertWithoutOrnamentInput = {
    update: XOR<merchantUpdateWithoutOrnamentInput, merchantUncheckedUpdateWithoutOrnamentInput>
    create: XOR<merchantCreateWithoutOrnamentInput, merchantUncheckedCreateWithoutOrnamentInput>
    where?: merchantWhereInput
  }

  export type merchantUpdateToOneWithWhereWithoutOrnamentInput = {
    where?: merchantWhereInput
    data: XOR<merchantUpdateWithoutOrnamentInput, merchantUncheckedUpdateWithoutOrnamentInput>
  }

  export type merchantUpdateWithoutOrnamentInput = {
    merchantCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type merchantUncheckedUpdateWithoutOrnamentInput = {
    merchantCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type billitemCreateManyBillInput = {
    id?: number
    ornamentId: string
    sellingPrice: number
  }

  export type billitemUpdateWithoutBillInput = {
    sellingPrice?: FloatFieldUpdateOperationsInput | number
    ornament?: ornamentUpdateOneRequiredWithoutBillitemNestedInput
  }

  export type billitemUncheckedUpdateWithoutBillInput = {
    id?: IntFieldUpdateOperationsInput | number
    ornamentId?: StringFieldUpdateOperationsInput | string
    sellingPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type billitemUncheckedUpdateManyWithoutBillInput = {
    id?: IntFieldUpdateOperationsInput | number
    ornamentId?: StringFieldUpdateOperationsInput | string
    sellingPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type billCreateManyClientInput = {
    id?: number
    totalAmount: number
    createdAt?: Date | string
  }

  export type billUpdateWithoutClientInput = {
    totalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billitem?: billitemUpdateManyWithoutBillNestedInput
  }

  export type billUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billitem?: billitemUncheckedUpdateManyWithoutBillNestedInput
  }

  export type billUncheckedUpdateManyWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ornamentCreateManyMerchantInput = {
    id?: number
    ornamentId: string
    type: string
    weight: number
    costPrice: number
    purity: string
    qrCode?: string | null
    isSold?: boolean
    createdAt?: Date | string
  }

  export type ornamentUpdateWithoutMerchantInput = {
    ornamentId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    costPrice?: FloatFieldUpdateOperationsInput | number
    purity?: StringFieldUpdateOperationsInput | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    isSold?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billitem?: billitemUpdateManyWithoutOrnamentNestedInput
  }

  export type ornamentUncheckedUpdateWithoutMerchantInput = {
    id?: IntFieldUpdateOperationsInput | number
    ornamentId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    costPrice?: FloatFieldUpdateOperationsInput | number
    purity?: StringFieldUpdateOperationsInput | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    isSold?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billitem?: billitemUncheckedUpdateManyWithoutOrnamentNestedInput
  }

  export type ornamentUncheckedUpdateManyWithoutMerchantInput = {
    id?: IntFieldUpdateOperationsInput | number
    ornamentId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    costPrice?: FloatFieldUpdateOperationsInput | number
    purity?: StringFieldUpdateOperationsInput | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    isSold?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type billitemCreateManyOrnamentInput = {
    id?: number
    billId: number
    sellingPrice: number
  }

  export type billitemUpdateWithoutOrnamentInput = {
    sellingPrice?: FloatFieldUpdateOperationsInput | number
    bill?: billUpdateOneRequiredWithoutBillitemNestedInput
  }

  export type billitemUncheckedUpdateWithoutOrnamentInput = {
    id?: IntFieldUpdateOperationsInput | number
    billId?: IntFieldUpdateOperationsInput | number
    sellingPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type billitemUncheckedUpdateManyWithoutOrnamentInput = {
    id?: IntFieldUpdateOperationsInput | number
    billId?: IntFieldUpdateOperationsInput | number
    sellingPrice?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}